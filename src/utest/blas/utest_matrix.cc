// ====================================================================== BEGIN FILE =====
// **                              U T E S T _ M A T R I X                              **
// =======================================================================================
// **                                                                                   **
// **  This file is part of the TRNCMP Research Library, `Callisto' (formerly SolLib.)  **
// **                                                                                   **
// **  Copyright (c) 2019-, Stephen W. Soliday                                          **
// **                       stephen.soliday@trncmp.org                                  **
// **                       http://research.trncmp.org                                  **
// **                                                                                   **
// **  -------------------------------------------------------------------------------  **
// **                                                                                   **
// **  Callisto is free software: you can redistribute it and/or modify it under the    **
// **  terms of the GNU General Public License as published by the Free Software        **
// **  Foundation, either version 3 of the License, or (at your option)                 **
// **  any later version.                                                               **
// **                                                                                   **
// **  Callisto is distributed in the hope that it will be useful, but WITHOUT          **
// **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS    **
// **  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.   **
// **                                                                                   **
// **  You should have received a copy of the GNU General Public License along with     **
// **  Callisto. If not, see <https://www.gnu.org/licenses/>.                           **
// **                                                                                   **
// ----- Modification History ------------------------------------------------------------
//
/** @brief  Automated testing for Matrix class methods.
 *  @file   utest_matrix.cc
 *  @author Stephen W. Soliday
 *  @date   2019-Jul-16
 *
 *  Provides automated testing for the Matrix class and methods.
 */
// =======================================================================================


#include <limits.h>
#include <Matrix.hh>
#include <gtest/gtest.h>

namespace {
  
real8_t ColMajor[] = { 1.1, 2.1, 3.1,
                       1.2, 2.2, 3.2, 
                       1.3, 2.3, 3.3, 
                       1.4, 2.4, 3.4, 
                       1.5, 2.5, 3.5 };

real8_t RowMajor[] = { 1.1, 1.2, 1.3, 1.4, 1.5,
                       2.1, 2.2, 2.3, 2.4, 2.5,
                       3.1, 3.2, 3.3, 3.4, 3.5 };
  
real8_t Symetric[] = { 1.1, 2.1, 3.1, 4.1,
                       2.1, 2.2, 3.2, 4.2,
                       3.1, 3.2, 3.3, 4.3,
                       4.1, 4.2, 4.3, 4.4 };
		       
real8_t UpperTri[] = { 1.1, 2.1, 3.1, 4.1,
                       /**/ 2.2, 3.2, 4.2,
                       /*     */ 3.3, 4.3,
                       /*          */ 4.4 };
		       
real8_t LowerTri[] = { 1.1, /*          */
                       2.1, 2.2, /*     */ 
                       3.1, 3.2, 3.3, /**/
                       4.1, 4.2, 4.3, 4.4 };

real8_t DVec[]     = { 1.1, 2.2, 3.3, 4.4 };

real8_t Diagonal[] = { 1.1, 0.0, 0.0, 0.0,
                       0.0, 2.2, 0.0, 0.0,
                       0.0, 0.0, 3.3, 0.0,
                       0.0, 0.0, 0.0, 4.4 };

real8_t Identity[] = { 1.0, 0.0, 0.0, 0.0,
                       0.0, 1.0, 0.0, 0.0,
                       0.0, 0.0, 1.0, 0.0,
                       0.0, 0.0, 0.0, 1.0 };

// =====================================================================================
bool check( real8_t v, Matrix& M, real8_t eps = D_EPSILON ) {
  // -----------------------------------------------------------------------------------
  int32_t nr = size( M, 0 );
  int32_t nc = size( M, 1 );
  for ( int32_t r=0; r<nr; r++ ) {
    for ( int32_t c=0; c<nc; c++ ) {
      real8_t dif = v - M(r,c);
      if ( dif < -eps ) { std::cout << dif << " < -" << eps << "\n"; return false; }
      if ( dif >  eps ) { std::cout << dif << "> " << eps << "\n"; return false; }
    }
  }
  return true;
}

  
// =====================================================================================
void load_index( Matrix& M ) {
  // -----------------------------------------------------------------------------------
  int32_t nr = size( M, 0 );
  int32_t nc = size( M, 1 );
  for ( int32_t r=0; r<nr; r++ ) {
    for ( int32_t c=0; c<nc; c++ ) {
      real8_t x = (real8_t)(r+1) + ((real8_t)(c+1))/100.0;
      //fprintf( stdout, "%d %d %d %d %g\n", r, nr, c, nc, x );
      M.at(r,c) = x;
    }
  }
}


// =====================================================================================
TEST( test_matrix_construct, Positive ) {
  // -----------------------------------------------------------------------------------
  {
    Matrix A;
    EXPECT_EQ(0, size(A,0) );
    EXPECT_EQ(0, size(A,1) );
  }

  {
    Matrix A(4);
    EXPECT_EQ(4, size(A,0) );
    EXPECT_EQ(4, size(A,1) );
    EXPECT_TRUE( A.isSquare() );
  }

  {
    Matrix A(7,11);
    EXPECT_EQ(7, size(A,0) );
    EXPECT_EQ(11, size(A,1) );
    EXPECT_FALSE( A.isSquare() );
  }

  {
    Matrix A(7,11,9);
    EXPECT_EQ(7, size(A,0) );
    EXPECT_EQ(11, size(A,1) );
    EXPECT_EQ(7, *(A.M()) );
    EXPECT_EQ(11, *(A.N()) );
    EXPECT_EQ(9, *(A.LDA()) );
  }
}


// =====================================================================================
TEST( test_matrix_set, Positive ) {
  // -----------------------------------------------------------------------------------
  {
    Matrix A(2,3,true);
    //A.debug();
    EXPECT_TRUE( check(D_ZERO,A) );
    A.set( D_FOUR );
    //A.debug();
    EXPECT_TRUE( check(D_FOUR,A) );
  }

  {
    Matrix A(4,5,true);
    EXPECT_TRUE( check(D_ZERO,A) );
    A.set( D_FOUR );
    EXPECT_TRUE( check(D_FOUR,A) );
  }
    
  {
    Matrix A(4,5,7,true);
    EXPECT_TRUE( check(D_ZERO,A) );
    A.set( D_FOUR );
    EXPECT_TRUE( check(D_FOUR,A) );
  }   
}


// =====================================================================================
TEST( test_matrix_copy, Positive ) {
  // -----------------------------------------------------------------------------------
  {
    Matrix A(4,5,true);
    Matrix B(3,2,true);
    EXPECT_TRUE( check(D_ZERO,A) );
    EXPECT_TRUE( check(D_ZERO,B) );
    A.set( D_FOUR );
    B.set( D_TWO );
    EXPECT_FALSE( A.equals(B) );
    EXPECT_TRUE( check(D_FOUR,A) );
    EXPECT_TRUE( check(D_TWO,B) );
    EXPECT_EQ(4, size(A,0) );
    EXPECT_EQ(5, size(A,1) );
    EXPECT_EQ(3, size(B,0) );
    EXPECT_EQ(2, size(B,1) );
    B.copy(A);
    EXPECT_TRUE( check(D_FOUR,B) );
    EXPECT_EQ(4, size(B,0) );
    EXPECT_EQ(5, size(B,1) );
    EXPECT_TRUE( A.equals(B) );
  }
    
  {
    Matrix A(4,5,7);
    load_index(A);
    Matrix B(A);
    EXPECT_TRUE( A.equals(B) );
    Matrix C(A,true);
    EXPECT_TRUE( A.equals(C) );
    EXPECT_EQ( *(A.M()), *(B.M()) );
    EXPECT_EQ( *(A.M()), *(C.M()) );
    EXPECT_EQ( *(A.N()), *(B.N()) );
    EXPECT_EQ( *(A.N()), *(C.N()) );
    EXPECT_NE( *(A.LDA()), *(B.LDA()) );
    EXPECT_EQ( *(A.LDA()), *(C.LDA()) );
  }

  {
    Matrix A(4,5,7);
    load_index(A);
    Matrix B;

    B = A;

    EXPECT_TRUE( A.equals(B) );
  }
}

// =====================================================================================
TEST( test_matrix_tostring, Print ) {
  // -----------------------------------------------------------------------------------
  Matrix A(4,5,7);
  load_index(A);
  std::string N = toNumpy( "A", A, "%g" );
  std::string O = toOctave( "A", A, "%g" );
  std::string S = toSage( "A", A, "%g" );
  const char* testN = "A=np.matrix( [[1.01,1.02,1.03,1.04,1.05],"
      "[2.01,2.02,2.03,2.04,2.05],[3.01,3.02,3.03,3.04,3.05],[4.01,4.02,4.03,4.04,4.05]])";

  const char* testO = "A = [1.01,1.02,1.03,1.04,1.05;2.01,2.02,"
      "2.03,2.04,2.05;3.01,3.02,3.03,3.04,3.05;4.01,4.02,4.03,4.04,4.05];";
      
  const char* testS = "A = Matrix(QQ,[[1.01,1.02,1.03,1.04,1.05],\n"
      "[2.01,2.02,2.03,2.04,2.05],\n[3.01,3.02,3.03,3.04,3.05],\n[4.01,4.02,4.03,4.04,4.05]])";
      
  EXPECT_STREQ( testN, N.c_str() );
  EXPECT_STREQ( testO, O.c_str() );
  EXPECT_STREQ( testS, S.c_str() );
}


// =====================================================================================
TEST( test_matrix_source, Col_Major_Test ) {
  // -----------------------------------------------------------------------------------
  Matrix T = Matrix::column_major( 5,3,ColMajor );
  Matrix A = Matrix::column_major( 5,3,ColMajor );
  EXPECT_TRUE( A.equals(T) );
}
    

// =====================================================================================
TEST( test_matrix_source, Row_Major_Test ) {
  // -----------------------------------------------------------------------------------
  Matrix T = Matrix::column_major( 3,5,ColMajor );
  Matrix A = Matrix::row_major( 3,5,RowMajor );
  EXPECT_TRUE( A.equals(T) );
}


// =====================================================================================
TEST( test_matrix_source, Upper_Triangle_Test ) {
  // -----------------------------------------------------------------------------------
  Matrix T = Matrix::row_major( 4, Symetric );
  Matrix A = Matrix::upper_triangle( 4, UpperTri );
  EXPECT_TRUE( A.equals(T) );
}


// =====================================================================================
TEST( test_matrix_source, Lower_Triangle_Test ) {
  // -----------------------------------------------------------------------------------
  Matrix T = Matrix::row_major( 4, 4, Symetric );
  Matrix A = Matrix::lower_triangle( 4, LowerTri );
  EXPECT_TRUE( A.equals(T) );
}
    

// =====================================================================================
TEST( test_matrix_source, Diagonal_Test ) {
  // -----------------------------------------------------------------------------------
  Matrix T = Matrix::row_major( 4, 4,Diagonal );
  Matrix A = Matrix::diagonal( 4, DVec );
  EXPECT_TRUE( A.equals(T) );
}


// =====================================================================================
TEST( test_matrix_source, Identity_Test ) {
  // -----------------------------------------------------------------------------------
  Matrix T = Matrix::row_major( 4, 4, Identity );
  Matrix A = Matrix::identity(4);
  EXPECT_TRUE( A.equals(T) );
}
    

// =====================================================================================
TEST( test_matrix_static, zero_test ) {
  // -----------------------------------------------------------------------------------
  Matrix T = Matrix::zero(4);
  Matrix B(4);  B.set();
  EXPECT_TRUE( B.equals(T) );
}

// =======================================================================================
TEST(test_matrix_element, add) {
  // -------------------------------------------------------------------------------------
    
  real8_t A[] = { -1.24, -4.71,  9.19, -1.91,
                  -8.16, -8.84,  3.55, -2.09,
                  -3.27, -1.08, -5.65,  8.04 };

  real8_t B[] = { -6.65, -1.38,  6.21,  1.73,
                  0.34, -9.32, -2.22, -9.97,
                  -4.35,  3.42,  3.60,  7.06 };

  real8_t C[] = { -7.89, -6.09, 15.40, -0.18,
                  -7.82, -18.16,  1.33, -12.06,
                  -7.62,  2.34, -2.05, 15.10 };

  real8_t S0[] = { -8.70, -12.17,  1.73, -9.37,
                   -15.62, -16.30, -3.91, -9.55,
                   -10.73, -8.54, -13.11,  0.58 };

  real8_t S1[] = { -14.11, -8.84, -1.25, -5.73,
                   -7.12, -16.78, -9.68, -17.43,
                   -11.81, -4.04, -3.86, -0.40 };

  real8_t S2[] = { -14.11, -8.84, -1.25, -5.73,
                   -7.12, -16.78, -9.68, -17.43,
                   -11.81, -4.04, -3.86, -0.40 };

  {
    Matrix  X = Matrix::row_major(3,4,A);
    Matrix  S = Matrix::row_major(3,4,S0);
    real8_t s = -7.46;
    X.add(s);
    EXPECT_TRUE( X.equals(S, 1.0e-14) );
  }

  {
    Matrix X = Matrix::row_major(3,4,A);
    Matrix Y = Matrix::row_major(3,4,B);
    Matrix Z = Matrix::row_major(3,4,C);
    X.add(Y);
    EXPECT_TRUE( X.equals(Z, 1.0e-14) );
  }

  {
    Matrix X = Matrix::row_major(3,4,A);
    Matrix Y = Matrix::row_major(3,4,B);
    Matrix S = Matrix::row_major(3,4,S1);
    real8_t s = -7.46;
    X.add(Y,s);
    EXPECT_TRUE( X.equals(S, 1.0e-14) );
  }

  {
    Matrix X = Matrix::row_major(3,4,A);
    Matrix Y = Matrix::row_major(3,4,B);
    Matrix S = Matrix::row_major(3,4,S1);
    real8_t s = -7.46;
    X.add(s,Y);
    EXPECT_TRUE( X.equals(S, 1.0e-14) );
  }

  {
    Matrix X = Matrix::row_major(3,4,A);
    Matrix Y = Matrix::row_major(3,4,B);
    Matrix Z = Matrix::row_major(3,4,C);
    Matrix T(2);
    T.add(X,Y);
    EXPECT_TRUE( T.equals(Z, 1.0e-14) );
  }

}







// =======================================================================================
TEST(test_matrix_element, sub) {
  // -------------------------------------------------------------------------------------
    
  real8_t A[] = { -2.53,  4.88,  6.77,  2.67,  4.85,
                  -3.01, -5.83,  3.33,  3.84, -0.14 };

  real8_t B[] = {  3.42, -4.57,  9.72, -2.64,  0.09,
                   -4.74, -1.17, -6.59, -6.96,  8.02 };

  real8_t C[] = { -5.95,  9.45, -2.95,  5.31,  4.76,
                  1.73, -4.66,  9.92, 10.80, -8.16 };

  real8_t S0[] = { -11.44, -4.03, -2.14, -6.24, -4.06,
                   -11.92, -14.74, -5.58, -5.07, -9.05 };

  real8_t S1[] = { -5.49, -13.48,  0.81, -11.55, -8.82,
                   -13.65, -10.08, -15.50, -15.87, -0.89 };

  real8_t S2[] = {  5.49, 13.48, -0.81, 11.55,  8.82,
                    13.65, 10.08, 15.50, 15.87,  0.89 };

  {
    Matrix  X = Matrix::row_major(2,5,A);
    Matrix  S = Matrix::row_major(2,5,S0);
    real8_t s = 8.91;
    X.sub(s);
    EXPECT_TRUE( X.equals(S, 1.0e-15) );
  }

  {
    Matrix X = Matrix::row_major(2,5,A);
    Matrix Y = Matrix::row_major(2,5,B);
    Matrix Z = Matrix::row_major(2,5,C);
    X.sub(Y);
    EXPECT_TRUE( X.equals(Z, 1.0e-15) );
  }

  {
    Matrix X = Matrix::row_major(2,5,A);
    Matrix Y = Matrix::row_major(2,5,B);
    Matrix S = Matrix::row_major(2,5,S1);
    real8_t s = 8.91;
    X.sub(Y,s);
    EXPECT_TRUE( X.equals(S, 1.0e-14) );
  }

  {
    Matrix X = Matrix::row_major(2,5,A);
    Matrix Y = Matrix::row_major(2,5,B);
    Matrix S = Matrix::row_major(2,5,S2);
    real8_t s = 8.91;
    X.sub(s,Y);
    EXPECT_TRUE( X.equals(S, 1.0e-14) );
  }

  {
    Matrix X = Matrix::row_major(2,5,A);
    Matrix Y = Matrix::row_major(2,5,B);
    Matrix Z = Matrix::row_major(2,5,C);
    Matrix T(2);
    T.sub(X,Y);
    EXPECT_TRUE( T.equals(Z, 1.0e-15) );
  }

}


// =======================================================================================
TEST(test_matrix_element, mul) {
  // -------------------------------------------------------------------------------------
    
  real8_t A[] = { -0.02, 7.97, 0.02, 3.7, -2.32, 7.75,
                  6.38, -0.11, 8.41, -4.33, 5.39, 0.15,
                  9.27, -9.81, -7.66, 3.53, -1.72, -6.31 };

  real8_t B[] = { -5.43, -5.25, -7.95, -6.52, -2.36, 9.92,
                  -4.8, -2.18, -7.06, 5.41, 7.92, 4.23,
                  5.8, -9.14, 2.18, 0.52, 3.07, -9.79 };

  real8_t C[] = { 0.1086, -41.8425, -0.159, -24.124, 5.4752, 76.88,
                  -30.624, 0.2398, -59.3746, -23.4253, 42.6888, 0.6345,
                  53.766, 89.6634, -16.6988, 1.8356, -5.2804, 61.7749 };

  real8_t S0[] = { -0.0558, 22.2363, 0.0558, 10.323, -6.4728, 21.6225,
                   17.8002, -0.3069, 23.4639, -12.0807, 15.0381, 0.4185,
                   25.8633, -27.3699, -21.3714, 9.8487, -4.7988, -17.6049 };

  real8_t S1[] = { -15.1497, -14.6475, -22.1805, -18.1908, -6.5844, 27.6768,
                   -13.392, -6.0822, -19.6974, 15.0939, 22.0968, 11.8017,
                   16.182, -25.5006, 6.0822, 1.4508, 8.5653, -27.3141 };

  real8_t S2[] = { -15.1497, -14.6475, -22.1805, -18.1908, -6.5844, 27.6768,
                   -13.392, -6.0822, -19.6974, 15.0939, 22.0968, 11.8017,
                   16.182, -25.5006, 6.0822, 1.4508, 8.5653, -27.3141 };

  {
    Matrix  X = Matrix::row_major(3,6,A);
    Matrix  S = Matrix::row_major(3,6,S0);
    real8_t s = 2.79;
    X.mul(s);
    EXPECT_TRUE( X.equals(S, 1.0e-14) );
  }

  {
    Matrix X = Matrix::row_major(3,6,A);
    Matrix Y = Matrix::row_major(3,6,B);
    Matrix Z = Matrix::row_major(3,6,C);
    X.mul(Y);
    EXPECT_TRUE( X.equals(Z, 1.0e-13) );
  }

  {
    Matrix X = Matrix::row_major(3,6,A);
    Matrix Y = Matrix::row_major(3,6,B);
    Matrix S = Matrix::row_major(3,6,S1);
    real8_t s = 2.79;
    X.mul(Y,s);
    EXPECT_TRUE( X.equals(S, 1.0e-14) );
  }

  {
    Matrix X = Matrix::row_major(3,6,A);
    Matrix Y = Matrix::row_major(3,6,B);
    Matrix S = Matrix::row_major(3,6,S2);
    real8_t s = 2.79;
    X.mul(s,Y);
    EXPECT_TRUE( X.equals(S, 1.0e-14) );
  }

  {
    Matrix X = Matrix::row_major(3,6,A);
    Matrix Y = Matrix::row_major(3,6,B);
    Matrix Z = Matrix::row_major(3,6,C);
    Matrix T(2);
    T.mul(X,Y);
    EXPECT_TRUE( T.equals(Z, 1.0e-13) );
  }

}



// =======================================================================================
TEST(test_matrix_element, div) {
  // -------------------------------------------------------------------------------------
    
  real8_t A[] = { -8.54, -6.57, -0.53, 7.23,
                  -2.71, -4.77, 0.4, -0.49,
                  -2.17, 8.68, -7.97, -6.24 };

  real8_t B[] = { -6.65, -4.06, -8.21, -3.42,
                  -7.48, 8.35, 0.79, 4.89,
                  8.84, 4.09, 4.07, 2.09 };

  real8_t C[] = {  1.284210526316e+00,  1.618226600985e+00,
                   6.455542021924e-02, -2.114035087719e+00,
                   3.622994652406e-01, -5.712574850299e-01,
                   5.063291139241e-01, -1.002044989775e-01,
                   -2.454751131222e-01,  2.122249388753e+00,
                   -1.958230958231e+00, -2.985645933014e+00 };

  real8_t S0[] = { -1.578558225508e+00, -1.214417744917e+00,
                   -9.796672828096e-02,  1.336414048059e+00,
                   -5.009242144177e-01, -8.817005545287e-01,
                   7.393715341959e-02, -9.057301293900e-02,
                   -4.011090573013e-01,  1.604436229205e+00,
                   -1.473197781885e+00, -1.153419593346e+00 };

  real8_t S1[] = { -1.229205175601e+00, -7.504621072089e-01,
                   -1.517560073937e+00, -6.321626617375e-01,
                   -1.382624768946e+00,  1.543438077634e+00,
                   1.460258780037e-01,  9.038817005545e-01,
                   1.634011090573e+00,  7.560073937153e-01,
                   7.523105360444e-01,  3.863216266174e-01 };

  real8_t S2[] = { -8.135338345865e-01, -1.332512315271e+00,
                   -6.589524969549e-01, -1.581871345029e+00,
                   -7.232620320856e-01,  6.479041916168e-01,
                   6.848101265823e+00,  1.106339468303e+00,
                   6.119909502262e-01,  1.322738386308e+00,
                   1.329238329238e+00,  2.588516746411e+00 };

  {
    Matrix  X = Matrix::row_major(3,4,A);
    Matrix  S = Matrix::row_major(3,4,S0);
    real8_t s = 5.41;
    X.div(s);
    EXPECT_TRUE( X.equals(S, 1.0e-12) );
  }

  {
    Matrix X = Matrix::row_major(3,4,A);
    Matrix Y = Matrix::row_major(3,4,B);
    Matrix Z = Matrix::row_major(3,4,C);
    X.div(Y);
    EXPECT_TRUE( X.equals(Z, 1.0e-12) );
  }

  {
    Matrix X = Matrix::row_major(3,4,A);
    Matrix Y = Matrix::row_major(3,4,B);
    Matrix S = Matrix::row_major(3,4,S1);
    real8_t s = 5.41;
    X.div(Y,s);
    EXPECT_TRUE( X.equals(S, 1.0e-12) );
  }

  {
    Matrix X = Matrix::row_major(3,4,A);
    Matrix Y = Matrix::row_major(3,4,B);
    Matrix S = Matrix::row_major(3,4,S2);
    real8_t s = 5.41;
    X.div(s,Y);
    EXPECT_TRUE( X.equals(S, 1.0e-12) );
  }

  {
    Matrix X = Matrix::row_major(3,4,A);
    Matrix Y = Matrix::row_major(3,4,B);
    Matrix Z = Matrix::row_major(3,4,C);
    Matrix T(2);
    T.div(X,Y);
    EXPECT_TRUE( T.equals(Z, 1.0e-12) );
  }

}

// =======================================================================================
TEST(test_matrix_sum, sum) {
  // -------------------------------------------------------------------------------------
  real8_t adat[] = { -5.19, 4.93, 9.4, -6.78, -3.67, -4.44,
                     -7.45, 3.41, -2.93, -0.85, 1.5, 6.11,
                     -0.83, -2, 4.64, -3.36, -0.31, -2.36 };

  Matrix  A = Matrix::row_major(3,6,adat);
  EXPECT_NEAR( -10.18, A.sum(), 1.0e-14 );
}

// =======================================================================================
TEST(test_matrix_sum, square) {
  // -------------------------------------------------------------------------------------
  real8_t adat[] = { -3.79, 7.51, -8.48, -4.27, -4.36,
                     -6.67, -8.46, -2.48, 8.44, 5.05,
                     -8.42, -5.2, -1.42, -7.94, -1.61,
                     -9.42, -8.8, -3.46, -3.98, -1.86 };

  Matrix  A = Matrix::row_major(4,5,adat);
  EXPECT_NEAR( 761.9006, A.sumsq(), 1.0e-12 );
}

// =======================================================================================
TEST(test_matrix_sum, diff) {
  // -------------------------------------------------------------------------------------
   real8_t adat[] = { -6.33, -7.37, -5.05, -5.28, 9.55,
                   0.56, 2.75, -0.84, -7.52, -4.01,
                   1.79, -7.57, 0, 6.32, -1.3,
                   1.01, 5.82, -0.1, -8.45, -7.66 };

    real8_t bdat[] = { 3.01, 6.52, 9.42, 8.64, 9.4,
                   1.18, -4.97, -0.46, 3.86, 8.62,
                   6.86, 5.64, 7.01, 3.06, -4.96,
                   -0.7, 4.61, 5.8, -9.35, 7.91 };

  Matrix  A = Matrix::row_major(4,5,adat);
  Matrix  B = Matrix::row_major(4,5,bdat);
  EXPECT_NEAR( 1588.2914, A.sumsq(B), 1.0e-12 );
}

// =======================================================================================
TEST(test_matrix_linalg, dot) {
  // -------------------------------------------------------------------------------------
  real8_t adat[] = { -8.83, -0.93, -4.11, 0.71, -6.46,
                     9.97, -1.36, -4.26, -3.94, -0.20,
                     -8.93, -5.40, -4.31, 9.49, -8.19,
                     4.19, -3.81, -9.93, 0.14, -3.97 };

  real8_t bdat[] = { 0.30, 7.91, -4.80, -7.02, 8.06, 2.91,
                     1.22, -2.16, 2.71, -4.59, -7.96, -9.99,
                     -5.14, 9.41, 1.80, -3.75, 1.00, -1.91,
                     6.57, 0.58, 6.56, 8.47, -6.06, 1.11,
                     -4.67, -3.92, 0.53, 5.05, 9.57, 5.45 };

  real8_t cdat[] = { 52.1747, -80.7766, 33.6995, 55.0585, -134.0018, -42.9734,
                     -1.7236, 40.2125, -85.1620, -82.1538, 108.8862, 45.2723,
                     113.4830, -61.9204, 78.3857, 142.6579, -169.1895, 2.0902,
                     67.1087, -36.4252, -49.4968, 6.4489, 15.3277, 47.7400 };

  Matrix  A = Matrix::row_major(4,5,adat);
  Matrix  B = Matrix::row_major(5,6,bdat);
  Matrix  C = Matrix::row_major(4,6,cdat);
  Matrix  T(2);

  T.dot(A,B);

  EXPECT_TRUE( T.equals(C, 1.0e-13) );
}


// =======================================================================================
TEST(test_matrix_linalg, trans) {
  // -------------------------------------------------------------------------------------
  Matrix X = Matrix::row_major(3,5,RowMajor);
  Matrix T = Matrix::column_major(5,3,RowMajor);
  Matrix A(2);
  A.T(X);
  EXPECT_TRUE( A.equals(T) );
}


  // =======================================================================================
  TEST(test_matrix_linalg, inverse_posdet) {
    // -------------------------------------------------------------------------------------
      {
	real8_t adat[] = { -4.82, -1.83, -5.93, 4.03, 4.20,
			   -1.48, 0.64, 8.29, 8.59, -3.96,
			   3.37, -2.88, 0.25, 8.84, -4.76,
			   -1.88, 5.97, 9.69, -0.60, 8.24,
			   9.73, 7.64, 9.90, -7.34, 1.37 };

	real8_t bdat[] = { -5.053609165109664708e-02, -1.236435352945354504e-01,  1.591065921843315134e-01,  5.581942981353411187e-02,  1.461201627893613658e-02,
			   6.043068633324900629e-01,  4.058251738406314924e-01, -3.559493129131688360e-01, -3.867185616699247985e-01,  4.096504241649185363e-01,
			   -2.790566618410859623e-01, -1.063747959228094481e-01,  1.117647005930230975e-01,  1.819438368482652335e-01, -1.579733233056055119e-01,
			   1.652552110736095758e-01,  7.931460595163830618e-02,  2.183702613319778510e-02, -4.636972607703577359e-02,  7.740491994753537219e-02,
			   -1.091635493343130064e-01, -1.913671842377779042e-01,  1.643495216421948790e-01,  1.969408648680805451e-01, -1.020555809296511268e-01 };


	Matrix  A1 = Matrix::row_major(5,5,adat);
	Matrix  A2 = Matrix::row_major(5,5,adat);
	Matrix  B  = Matrix::row_major(5,5,bdat);
	real8_t d  =  1.713659636698889517e+04;
	Matrix C(2);
	Matrix E(2);

	real8_t D = C.inverse(A1);
	EXPECT_TRUE( C.equals(B) );
	EXPECT_NEAR( d, D, 1.0e-8);
	E.dot( A2, B );
	EXPECT_NEAR( D_FIVE, E.sum(), 1.0e-8 );
      }
 
      {
	real8_t adat[] = { -9.48, -0.33, -0.73, -9.01, 2.57, 0.52,
			   2.81, 3.33, 6.11, -9.31, 4.39, 2.32,
			   4.22, -7.52, -7.37, 4.28, 9.25, 9.76,
			   -1.56, -1.62, -1.96, -0.42, 7.48, -7.17,
			   6.38, 9.02, 8.88, -6.90, -5.85, 2.68,
			   4.13, -6.34, -2.17, 3.00, -8.45, 2.94 };

	real8_t bdat[] = {  2.177146747080737580e-03, -6.770055968061229612e-02,  6.258515089619573479e-02,  1.418824213875405360e-01,  1.445636537910212349e-01,  5.951308795659752959e-02,
			    6.130541428678541738e-02, -2.102079558745346410e-01,  7.363496993165052906e-02,  8.054396758045996585e-02,  2.083149761472780082e-01, -8.287671865847777430e-02,
			    -1.771509488891057083e-01,  3.550609865672864629e-01, -1.626740375825332374e-01, -2.674588803350076427e-01, -3.504698633173184419e-01, -4.161405677545446796e-02,
			    -1.125005947336725765e-01,  7.265868717214050976e-02, -5.180943015774663873e-02, -1.422579664139097810e-01, -1.517389429512246146e-01, -7.406022405329931724e-02,
			    -3.959532894361200706e-02,  7.164922603656541378e-02,  7.415935075193034326e-03, -1.596041903292838918e-02, -6.342639595497791272e-02, -5.526177652884126795e-02,
			    -6.161884180567122303e-04,  3.565547978909766602e-02,  2.498616206459182768e-02, -1.237425366611932809e-01, -3.999549719307669837e-02, -3.616030349219168799e-02 };


	Matrix  A1 = Matrix::row_major(6,6,adat);
	Matrix  A2 = Matrix::row_major(6,6,adat);
	Matrix  B  = Matrix::row_major(6,6,bdat);
	real8_t d  =  4.500427207128849113e+05;
	Matrix C(2);
	Matrix E(2);

	real8_t D = C.inverse(A1);
	EXPECT_TRUE( C.equals(B) );
	EXPECT_NEAR( d, D, 1.0e-8 );
	E.dot( A2, B );
	EXPECT_NEAR( D_SIX, E.sum(), 1.0e-8 );
      }

    }


    // =======================================================================================
    TEST(test_matrix_linalg, inverse_negdet) {
      // -------------------------------------------------------------------------------------


{
    real8_t adat[] = { -1.63, 2.39, -5.14, -7.60,
                   4.26, -7.56, -2.54, 2.47,
                   -8.47, -4.47, -9.59, 7.33,
                   -2.26, -2.55, -2.64, 6.23 };

    real8_t bdat[] = {  2.307347247614115471e-01,  4.363206409851770606e-02, -3.075671580537445715e-01,  6.260481506255755058e-01,
                    2.412809178681272482e-01, -1.153912925877030454e-01, -2.845405882682645049e-01,  6.748690177360788800e-01,
                   -2.614821467967506918e-01, -1.294703893859822097e-02,  1.859179560718975943e-01, -5.325945020038485023e-01,
                    7.165552985250285556e-02, -3.688916758168411109e-02, -1.492547148083029629e-01,  4.381597641012266453e-01 };


  Matrix  A1 = Matrix::row_major(4,4,adat);
  Matrix  A2 = Matrix::row_major(4,4,adat);
  Matrix  B  = Matrix::row_major(4,4,bdat);
  real8_t d  =  1.087265981570000349e+03;
  Matrix C(2);
  Matrix E(2);

  real8_t D = C.inverse(A1);
  EXPECT_TRUE( C.equals(B) );
  EXPECT_NEAR( d, D, 1.0e-9 );
  E.dot( A2, B );
  EXPECT_NEAR( D_FOUR, E.sum(), 1.0e-9 );
}

 

{
    real8_t adat[] = { 3.83, 2.51, 7.63, -1.74, -1.78,
                   -5.91, 8.58, 6.18, -9.08, -3.20,
                   2.79, -1.96, 3.23, -3.35, 1.33,
                   0.37, -1.85, -1.66, 6.34, -0.97,
                   -2.51, -2.74, -5.74, -6.67, 1.15 };

    real8_t bdat[] = {  2.879482008300136564e-01, -1.807905521464736875e-01, -3.080153489167640757e-01, -2.507910137850015153e-01,  8.731405330135028064e-02,
                    8.429519899732446087e-02, -1.036943375999099942e-01, -3.577754869935066973e-01, -4.031400354595631175e-01, -8.433118504251049807e-02,
                   -1.403027806033986247e-01,  1.153565084910457145e-01,  3.139613522499649645e-01,  1.760697594877533856e-01, -1.107643948626397951e-01,
                   -8.171049707213628999e-02,  3.708015584345865367e-03,  2.009348623669272166e-02,  4.068086853801185926e-02, -1.050808079403701134e-01,
                   -3.448940406944819848e-01, -4.437212889148948319e-02,  1.589029173654379345e-01, -3.931368079576638697e-01, -3.031180771338354840e-01 };


  Matrix  A1 = Matrix::row_major(5,5,adat);
  Matrix  A2 = Matrix::row_major(5,5,adat);
  Matrix  B  = Matrix::row_major(5,5,bdat);
  real8_t d  = -2.786252267551501973e+03;
  Matrix C(2);
  Matrix E(2);

  real8_t D = C.inverse(A1);
  EXPECT_TRUE( C.equals(B) );
  EXPECT_NEAR( d, D, 1.0e-9 );
  E.dot( A2, B );
  EXPECT_NEAR( D_FIVE, E.sum(), 1.0e-9 );
}

 

{
    real8_t adat[] = { 8.41, 6.30, 2.32, -9.36, -2.65, 4.38,
                   -6.57, -4.00, -8.06, -6.89, -1.18, -3.37,
                   -8.60, -5.84, -2.07, 4.27, 8.44, -1.43,
                   -9.17, -6.85, 0.98, 2.07, -8.58, -7.18,
                   8.99, -2.10, -6.60, 0.73, -1.71, 9.11,
                   7.79, 4.79, 9.40, 5.97, -4.80, 4.23 };

    real8_t bdat[] = {  6.231715215392465146e-02, -4.932168547990923857e-01, -1.377626639305356560e-01,  1.388213348832042504e-01,  7.517793189349358807e-02, -4.303130760321789428e-01,
                   -1.870642960437922664e-01,  4.549849902133314417e-01, -5.527015591500927805e-02, -2.432625950834508277e-01, -1.137699553590518636e-01,  3.696036811711723158e-01,
                    1.477826556849110018e-01, -1.653395540112420903e-01,  9.529187903261962522e-02,  1.072860988549025063e-01, -2.928833850413977129e-03, -6.411798480985309023e-02,
                   -1.426728219523689389e-01,  7.806170409627963269e-02, -4.991473954406539654e-02, -6.682703903020499603e-02, -6.479858115194533398e-03,  9.357214955091611164e-02,
                    4.631222002101727242e-02, -1.951123787038514246e-01,  2.245373179139781641e-02,  1.509645876882729880e-02,  1.812054049008362698e-03, -1.740857309429366950e-01,
                    2.257347576573381920e-02,  4.289374024197331603e-01,  2.004587337167665628e-01, -1.071534922992483652e-01,  8.093533639807654750e-03,  4.232172684038562060e-01 };


  Matrix  A1 = Matrix::row_major(6,6,adat);
  Matrix  A2 = Matrix::row_major(6,6,adat);
  Matrix  B  = Matrix::row_major(6,6,bdat);
  real8_t d  = -1.740678622218319797e+05;
  Matrix C(2);
  Matrix E(2);

  real8_t D = C.inverse(A1);
  EXPECT_TRUE( C.equals(B) );
  EXPECT_NEAR( d, D, 1.0e-9 );
  E.dot( A2, B );
  EXPECT_NEAR( D_SIX, E.sum(), 1.0e-9 );
}

 

{
    real8_t adat[] = { 4.04, -5.45, 1.62, -1.48, 5.71, 0.75, -0.18,
                   8.38, 3.82, -9.88, 8.98, -1.97, 9.39, -7.65,
                   2.43, -2.35, -6.04, 6.11, 3.48, -2.97, 9.44,
                   8.31, 2.05, -8.98, 1.82, 3.68, 6.98, -0.36,
                   -3.98, -0.41, -4.86, -1.09, 8.36, -7.84, -7.00,
                   -1.10, -2.31, -9.69, -8.43, 8.62, -9.08, 8.22,
                   -5.27, -9.49, 7.09, 9.45, -9.54, 9.75, -2.15 };

    real8_t bdat[] = {  1.420956645474932001e-01,  1.525733975407077281e-01,  1.836501368699685732e-03, -1.848923540778059649e-01, -9.413403282560380003e-02,  3.756199257223145904e-02, -6.565957288067839071e-02,
                   -1.099415121094349801e-01, -1.041654302492957124e-01,  2.134051376492803950e-02,  1.328895533248928007e-01,  3.775128897748419171e-02, -9.608635232079544564e-02, -3.898586725049215523e-02,
                    2.960337426318100998e-02, -6.710740561001059257e-02,  1.926062952085781654e-02,  2.440321517734728163e-02,  5.527493285817391966e-03, -8.422971132329257204e-02, -2.324765084461645481e-02,
                   -1.765860535264804701e-02, -1.504462130870193315e-02,  8.403903252675407054e-02,  1.184237043448035757e-02,  4.442038777898972557e-02, -7.216667317625667655e-02,  1.480161725318245806e-03,
                   -3.445809956517967287e-02, -1.756953702567040365e-01,  4.003971617369624092e-02,  2.250589588108116434e-01,  1.068411934568302551e-01, -1.070026365223306908e-01,  9.198004410208732509e-03,
                   -7.837294609151487790e-02, -1.449217029546727431e-01, -2.430954892686347513e-02,  2.381683623844130238e-01,  3.922244288621393876e-02, -5.052039726428467215e-02,  5.474448365387058618e-02,
                   -4.553072271803620952e-02, -7.923154450001144988e-02,  4.629297139744774359e-02,  8.059028248507958681e-02, -1.863114183026471499e-02, -1.722076885247515038e-02,  5.196868212148647928e-03 };


  Matrix  A1 = Matrix::row_major(7,7,adat);
  Matrix  A2 = Matrix::row_major(7,7,adat);
  Matrix  B  = Matrix::row_major(7,7,bdat);
  real8_t d  =  1.287160777532303333e+07;
  Matrix C(2);
  Matrix E(2);

  real8_t D = C.inverse(A1);
  EXPECT_TRUE( C.equals(B) );
  EXPECT_NEAR( d, D, 1.0e-6 );
  E.dot( A2, B );
  EXPECT_NEAR( D_SEVEN, E.sum(), 1.0e-6 );
}


    }


  } // end namespace


// =======================================================================================
// **                              U T E S T _ M A T R I X                              **
// ======================================================================== END FILE =====
