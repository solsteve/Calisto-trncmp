// ====================================================================== BEGIN FILE =====
// **                              U T E S T _ M A T R I X                              **
// =======================================================================================
// **                                                                                   **
// **  This file is part of the TRNCMP Research Library, `Callisto' (formerly SolLib.)  **
// **                                                                                   **
// **  Copyright (c) 2019-, Stephen W. Soliday                                          **
// **                       stephen.soliday@trncmp.org                                  **
// **                       http://research.trncmp.org                                  **
// **                                                                                   **
// **  -------------------------------------------------------------------------------  **
// **                                                                                   **
// **  Callisto is free software: you can redistribute it and/or modify it under the    **
// **  terms of the GNU General Public License as published by the Free Software        **
// **  Foundation, either version 3 of the License, or (at your option)                 **
// **  any later version.                                                               **
// **                                                                                   **
// **  Callisto is distributed in the hope that it will be useful, but WITHOUT          **
// **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS    **
// **  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.   **
// **                                                                                   **
// **  You should have received a copy of the GNU General Public License along with     **
// **  Callisto. If not, see <https://www.gnu.org/licenses/>.                           **
// **                                                                                   **
// ----- Modification History ------------------------------------------------------------
//
/** @brief  Automated testing for Matrix class methods.
 *  @file   utest_matrix.cc
 *  @author Stephen W. Soliday
 *  @date   2019-Jul-16
 *
 *  Provides automated testing for the Matrix class and methods.
 */
// =======================================================================================


#include <limits.h>
#include <Matrix.hh>
#include <gtest/gtest.h>

namespace {
  
  real8_t ColMajor[] = { 1.1, 2.1, 3.1,
			 1.2, 2.2, 3.2, 
			 1.3, 2.3, 3.3, 
			 1.4, 2.4, 3.4, 
			 1.5, 2.5, 3.5 };

  real8_t RowMajor[] = { 1.1, 1.2, 1.3, 1.4, 1.5,
			 2.1, 2.2, 2.3, 2.4, 2.5,
			 3.1, 3.2, 3.3, 3.4, 3.5 };
  
  real8_t Symetric[] = { 1.1, 2.1, 3.1, 4.1,
			 2.1, 2.2, 3.2, 4.2,
			 3.1, 3.2, 3.3, 4.3,
			 4.1, 4.2, 4.3, 4.4 };
		       
  real8_t UpperTri[] = { 1.1, 2.1, 3.1, 4.1,
			 /**/ 2.2, 3.2, 4.2,
			 /*     */ 3.3, 4.3,
			 /*          */ 4.4 };
		       
  real8_t LowerTri[] = { 1.1, /*          */
			 2.1, 2.2, /*     */ 
			 3.1, 3.2, 3.3, /**/
			 4.1, 4.2, 4.3, 4.4 };

  real8_t DVec[]     = { 1.1, 2.2, 3.3, 4.4 };

  real8_t Diagonal[] = { 1.1, 0.0, 0.0, 0.0,
			 0.0, 2.2, 0.0, 0.0,
			 0.0, 0.0, 3.3, 0.0,
			 0.0, 0.0, 0.0, 4.4 };

  real8_t Identity[] = { 1.0, 0.0, 0.0, 0.0,
			 0.0, 1.0, 0.0, 0.0,
			 0.0, 0.0, 1.0, 0.0,
			 0.0, 0.0, 0.0, 1.0 };

  // =====================================================================================
  bool check( real8_t v, Matrix& M, real8_t eps = D_EPSILON ) {
    // -----------------------------------------------------------------------------------
    int32_t nr = size( M, 0 );
    int32_t nc = size( M, 1 );
    for ( int32_t r=0; r<nr; r++ ) {
      for ( int32_t c=0; c<nc; c++ ) {
	real8_t dif = v - M(r,c);
	if ( dif < -eps ) { std::cout << dif << " < -" << eps << "\n"; return false; }
	if ( dif >  eps ) { std::cout << dif << "> " << eps << "\n"; return false; }
      }
    }
    return true;
  }

  
  // =====================================================================================
  void load_index( Matrix& M ) {
    // -----------------------------------------------------------------------------------
    int32_t nr = size( M, 0 );
    int32_t nc = size( M, 1 );
    for ( int32_t r=0; r<nr; r++ ) {
      for ( int32_t c=0; c<nc; c++ ) {
	real8_t x = (real8_t)(r+1) + ((real8_t)(c+1))/100.0;
	//fprintf( stdout, "%d %d %d %d %g\n", r, nr, c, nc, x );
	M.at(r,c) = x;
      }
    }
  }


  // =====================================================================================
  TEST( test_matrix_construct, basic ) {
    // -----------------------------------------------------------------------------------
    {
      Matrix A;
      EXPECT_EQ(0, size(A,0) );
      EXPECT_EQ(0, size(A,1) );
    }

    {
      Matrix A(4);
      EXPECT_EQ(4, size(A,0) );
      EXPECT_EQ(4, size(A,1) );
      EXPECT_TRUE( A.isSquare() );
    }

    {
      Matrix A(7,11);
      EXPECT_EQ(7, size(A,0) );
      EXPECT_EQ(11, size(A,1) );
      EXPECT_FALSE( A.isSquare() );
    }

    {
      Matrix A(7,11);
      EXPECT_EQ(7,  size(A,0) );
      EXPECT_EQ(11, size(A,1) );
      EXPECT_EQ(7,  *(A.M()) );
      EXPECT_EQ(11, *(A.N()) );
      EXPECT_EQ(7,  *(A.LDA()) );
    }
  }


  // =====================================================================================
  TEST( test_matrix_assignment, set ) {
    // -----------------------------------------------------------------------------------
    {
      Matrix A(2,3,true);
      //A.debug();
      EXPECT_TRUE( check(D_ZERO,A) );
      A.set( D_FOUR );
      //A.debug();
      EXPECT_TRUE( check(D_FOUR,A) );
    }

    {
      Matrix A(4,5,true);
      EXPECT_TRUE( check(D_ZERO,A) );
      A.set( D_FOUR );
      EXPECT_TRUE( check(D_FOUR,A) );
    }
    
    {
      Matrix A(4,5,true);
      EXPECT_TRUE( check(D_ZERO,A) );
      A.set( D_FOUR );
      EXPECT_TRUE( check(D_FOUR,A) );
    }   
  }


  // =====================================================================================
  TEST( test_matrix_assignment, copy ) {
    // -----------------------------------------------------------------------------------
    {
      Matrix A(4,5,true);
      Matrix B(3,2,true);
      EXPECT_TRUE( check(D_ZERO,A) );
      EXPECT_TRUE( check(D_ZERO,B) );
      A.set( D_FOUR );
      B.set( D_TWO );
      EXPECT_FALSE( A.equals(B) );
      EXPECT_TRUE( check(D_FOUR,A) );
      EXPECT_TRUE( check(D_TWO,B) );
      EXPECT_EQ(4, size(A,0) );
      EXPECT_EQ(5, size(A,1) );
      EXPECT_EQ(3, size(B,0) );
      EXPECT_EQ(2, size(B,1) );
      B.copy(A);
      EXPECT_TRUE( check(D_FOUR,B) );
      EXPECT_EQ(4, size(B,0) );
      EXPECT_EQ(5, size(B,1) );
      EXPECT_TRUE( A.equals(B) );
    }

    {
      Matrix A(4,5);
      load_index(A);
      Matrix B(A);
      EXPECT_TRUE( A.equals(B) );
      Matrix C(A);
      EXPECT_TRUE( A.equals(C) );
      EXPECT_EQ( *(A.M()), *(B.M()) );
      EXPECT_EQ( *(A.M()), *(C.M()) );
      EXPECT_EQ( *(A.N()), *(B.N()) );
      EXPECT_EQ( *(A.N()), *(C.N()) );
      EXPECT_EQ( *(A.LDA()), *(C.LDA()) );
    }

    {
      Matrix A(4,5);
      load_index(A);
      Matrix B;

      B = A;

      EXPECT_TRUE( A.equals(B) );
    }
  }

  // =====================================================================================
  TEST( test_matrix_tostring, Print ) {
    // -----------------------------------------------------------------------------------
    Matrix A(4,5,7);
    load_index(A);
    std::string N = toNumpy( "A", A, "%g" );
    std::string O = toOctave( "A", A, "%g" );
    std::string S = toSage( "A", A, "%g" );
    const char* testN = "A=np.matrix( [[1.01,1.02,1.03,1.04,1.05],"
      "[2.01,2.02,2.03,2.04,2.05],[3.01,3.02,3.03,3.04,3.05],[4.01,4.02,4.03,4.04,4.05]])";

    const char* testO = "A = [1.01,1.02,1.03,1.04,1.05;2.01,2.02,"
      "2.03,2.04,2.05;3.01,3.02,3.03,3.04,3.05;4.01,4.02,4.03,4.04,4.05];";
      
    const char* testS = "A = Matrix(QQ,[[1.01,1.02,1.03,1.04,1.05],\n"
      "[2.01,2.02,2.03,2.04,2.05],\n[3.01,3.02,3.03,3.04,3.05],\n[4.01,4.02,4.03,4.04,4.05]])";
      
    EXPECT_STREQ( testN, N.c_str() );
    EXPECT_STREQ( testO, O.c_str() );
    EXPECT_STREQ( testS, S.c_str() );
  }


  // =====================================================================================
  TEST( test_matrix_source, Col_Major_Test ) {
    // -----------------------------------------------------------------------------------
    Matrix T = Matrix::column_major( 5,3,ColMajor );
    Matrix A = Matrix::column_major( 5,3,ColMajor );
    EXPECT_TRUE( A.equals(T) );
  }
    

  // =====================================================================================
  TEST( test_matrix_source, Row_Major_Test ) {
    // -----------------------------------------------------------------------------------
    Matrix T = Matrix::column_major( 3,5,ColMajor );
    Matrix A = Matrix::row_major( 3,5,RowMajor );
    EXPECT_TRUE( A.equals(T) );
  }


  // =====================================================================================
  TEST( test_matrix_source, Upper_Triangle_Test ) {
    // -----------------------------------------------------------------------------------
    Matrix T = Matrix::row_major( 4, Symetric );
    Matrix A = Matrix::upper_triangle( 4, UpperTri );
    EXPECT_TRUE( A.equals(T) );
  }


  // =====================================================================================
  TEST( test_matrix_source, Lower_Triangle_Test ) {
    // -----------------------------------------------------------------------------------
    Matrix T = Matrix::row_major( 4, 4, Symetric );
    Matrix A = Matrix::lower_triangle( 4, LowerTri );
    EXPECT_TRUE( A.equals(T) );
  }
    

  // =====================================================================================
  TEST( test_matrix_source, Diagonal_Test ) {
    // -----------------------------------------------------------------------------------
    Matrix T = Matrix::row_major( 4, 4,Diagonal );
    Matrix A = Matrix::diagonal( 4, DVec );
    EXPECT_TRUE( A.equals(T) );
  }


  // =====================================================================================
  TEST( test_matrix_source, Identity_Test ) {
    // -----------------------------------------------------------------------------------
    Matrix T = Matrix::row_major( 4, 4, Identity );
    Matrix A = Matrix::identity(4);
    EXPECT_TRUE( A.equals(T) );
  }
    

  // =====================================================================================
  TEST( test_matrix_static, zero_test ) {
    // -----------------------------------------------------------------------------------
    Matrix T = Matrix::zero(4);
    Matrix B(4);  B.set();
    EXPECT_TRUE( B.equals(T) );
  }

  // =======================================================================================
  TEST(test_matrix_element, add) {
    // -------------------------------------------------------------------------------------
    
    real8_t A[] = { -1.24, -4.71,  9.19, -1.91,
		    -8.16, -8.84,  3.55, -2.09,
		    -3.27, -1.08, -5.65,  8.04 };

    real8_t B[] = { -6.65, -1.38,  6.21,  1.73,
		    0.34, -9.32, -2.22, -9.97,
		    -4.35,  3.42,  3.60,  7.06 };

    real8_t C[] = { -7.89, -6.09, 15.40, -0.18,
		    -7.82, -18.16,  1.33, -12.06,
		    -7.62,  2.34, -2.05, 15.10 };

    real8_t S0[] = { -8.70, -12.17,  1.73, -9.37,
		     -15.62, -16.30, -3.91, -9.55,
		     -10.73, -8.54, -13.11,  0.58 };

    real8_t S1[] = { -14.11, -8.84, -1.25, -5.73,
		     -7.12, -16.78, -9.68, -17.43,
		     -11.81, -4.04, -3.86, -0.40 };

    real8_t S2[] = { -14.11, -8.84, -1.25, -5.73,
		     -7.12, -16.78, -9.68, -17.43,
		     -11.81, -4.04, -3.86, -0.40 };

    {
      Matrix  X = Matrix::row_major(3,4,A);
      Matrix  S = Matrix::row_major(3,4,S0);
      real8_t s = -7.46;
      X.add(s);
      EXPECT_TRUE( X.equals(S, 1.0e-14) );
    }

    {
      Matrix X = Matrix::row_major(3,4,A);
      Matrix Y = Matrix::row_major(3,4,B);
      Matrix Z = Matrix::row_major(3,4,C);
      X.add(Y);
      EXPECT_TRUE( X.equals(Z, 1.0e-14) );
    }

    {
      Matrix X = Matrix::row_major(3,4,A);
      Matrix Y = Matrix::row_major(3,4,B);
      Matrix S = Matrix::row_major(3,4,S1);
      real8_t s = -7.46;
      X.add(Y,s);
      EXPECT_TRUE( X.equals(S, 1.0e-14) );
    }

    {
      Matrix X = Matrix::row_major(3,4,A);
      Matrix Y = Matrix::row_major(3,4,B);
      Matrix S = Matrix::row_major(3,4,S2);
      real8_t s = -7.46;
      X.add(s,Y);
      EXPECT_TRUE( X.equals(S, 1.0e-14) );
    }

    {
      Matrix X = Matrix::row_major(3,4,A);
      Matrix Y = Matrix::row_major(3,4,B);
      Matrix Z = Matrix::row_major(3,4,C);
      Matrix T(2);
      T.add(X,Y);
      EXPECT_TRUE( T.equals(Z, 1.0e-14) );
    }

  }







  // =======================================================================================
  TEST(test_matrix_element, sub) {
    // -------------------------------------------------------------------------------------
    
    real8_t A[] = { -2.53,  4.88,  6.77,  2.67,  4.85,
		    -3.01, -5.83,  3.33,  3.84, -0.14 };

    real8_t B[] = {  3.42, -4.57,  9.72, -2.64,  0.09,
		     -4.74, -1.17, -6.59, -6.96,  8.02 };

    real8_t C[] = { -5.95,  9.45, -2.95,  5.31,  4.76,
		    1.73, -4.66,  9.92, 10.80, -8.16 };

    real8_t S0[] = { -11.44, -4.03, -2.14, -6.24, -4.06,
		     -11.92, -14.74, -5.58, -5.07, -9.05 };

    real8_t S1[] = { -5.49, -13.48,  0.81, -11.55, -8.82,
		     -13.65, -10.08, -15.50, -15.87, -0.89 };

    real8_t S2[] = {  5.49, 13.48, -0.81, 11.55,  8.82,
		      13.65, 10.08, 15.50, 15.87,  0.89 };

    {
      Matrix  X = Matrix::row_major(2,5,A);
      Matrix  S = Matrix::row_major(2,5,S0);
      real8_t s = 8.91;
      X.sub(s);
      EXPECT_TRUE( X.equals(S, 1.0e-15) );
    }

    {
      Matrix X = Matrix::row_major(2,5,A);
      Matrix Y = Matrix::row_major(2,5,B);
      Matrix Z = Matrix::row_major(2,5,C);
      X.sub(Y);
      EXPECT_TRUE( X.equals(Z, 1.0e-15) );
    }

    {
      Matrix X = Matrix::row_major(2,5,A);
      Matrix Y = Matrix::row_major(2,5,B);
      Matrix S = Matrix::row_major(2,5,S1);
      real8_t s = 8.91;
      X.sub(Y,s);
      EXPECT_TRUE( X.equals(S, 1.0e-14) );
    }

    {
      Matrix X = Matrix::row_major(2,5,A);
      Matrix Y = Matrix::row_major(2,5,B);
      Matrix S = Matrix::row_major(2,5,S2);
      real8_t s = 8.91;
      X.sub(s,Y);
      EXPECT_TRUE( X.equals(S, 1.0e-14) );
    }

    {
      Matrix X = Matrix::row_major(2,5,A);
      Matrix Y = Matrix::row_major(2,5,B);
      Matrix Z = Matrix::row_major(2,5,C);
      Matrix T(2);
      T.sub(X,Y);
      EXPECT_TRUE( T.equals(Z, 1.0e-15) );
    }

  }


  // =======================================================================================
  TEST(test_matrix_element, mul) {
    // -------------------------------------------------------------------------------------
    
    real8_t A[] = { -0.02, 7.97, 0.02, 3.7, -2.32, 7.75,
		    6.38, -0.11, 8.41, -4.33, 5.39, 0.15,
		    9.27, -9.81, -7.66, 3.53, -1.72, -6.31 };

    real8_t B[] = { -5.43, -5.25, -7.95, -6.52, -2.36, 9.92,
		    -4.8, -2.18, -7.06, 5.41, 7.92, 4.23,
		    5.8, -9.14, 2.18, 0.52, 3.07, -9.79 };

    real8_t C[] = { 0.1086, -41.8425, -0.159, -24.124, 5.4752, 76.88,
		    -30.624, 0.2398, -59.3746, -23.4253, 42.6888, 0.6345,
		    53.766, 89.6634, -16.6988, 1.8356, -5.2804, 61.7749 };

    real8_t S0[] = { -0.0558, 22.2363, 0.0558, 10.323, -6.4728, 21.6225,
		     17.8002, -0.3069, 23.4639, -12.0807, 15.0381, 0.4185,
		     25.8633, -27.3699, -21.3714, 9.8487, -4.7988, -17.6049 };

    real8_t S1[] = { -15.1497, -14.6475, -22.1805, -18.1908, -6.5844, 27.6768,
		     -13.392, -6.0822, -19.6974, 15.0939, 22.0968, 11.8017,
		     16.182, -25.5006, 6.0822, 1.4508, 8.5653, -27.3141 };

    real8_t S2[] = { -15.1497, -14.6475, -22.1805, -18.1908, -6.5844, 27.6768,
		     -13.392, -6.0822, -19.6974, 15.0939, 22.0968, 11.8017,
		     16.182, -25.5006, 6.0822, 1.4508, 8.5653, -27.3141 };

    {
      Matrix  X = Matrix::row_major(3,6,A);
      Matrix  S = Matrix::row_major(3,6,S0);
      real8_t s = 2.79;
      X.mul(s);
      EXPECT_TRUE( X.equals(S, 1.0e-14) );
    }

    {
      Matrix X = Matrix::row_major(3,6,A);
      Matrix Y = Matrix::row_major(3,6,B);
      Matrix Z = Matrix::row_major(3,6,C);
      X.mul(Y);
      EXPECT_TRUE( X.equals(Z, 1.0e-13) );
    }

    {
      Matrix X = Matrix::row_major(3,6,A);
      Matrix Y = Matrix::row_major(3,6,B);
      Matrix S = Matrix::row_major(3,6,S1);
      real8_t s = 2.79;
      X.mul(Y,s);
      EXPECT_TRUE( X.equals(S, 1.0e-14) );
    }

    {
      Matrix X = Matrix::row_major(3,6,A);
      Matrix Y = Matrix::row_major(3,6,B);
      Matrix S = Matrix::row_major(3,6,S2);
      real8_t s = 2.79;
      X.mul(s,Y);
      EXPECT_TRUE( X.equals(S, 1.0e-14) );
    }

    {
      Matrix X = Matrix::row_major(3,6,A);
      Matrix Y = Matrix::row_major(3,6,B);
      Matrix Z = Matrix::row_major(3,6,C);
      Matrix T(2);
      T.mul(X,Y);
      EXPECT_TRUE( T.equals(Z, 1.0e-13) );
    }

  }



  // =======================================================================================
  TEST(test_matrix_element, div) {
    // -------------------------------------------------------------------------------------
    
    real8_t A[] = { -8.54, -6.57, -0.53, 7.23,
		    -2.71, -4.77, 0.4, -0.49,
		    -2.17, 8.68, -7.97, -6.24 };

    real8_t B[] = { -6.65, -4.06, -8.21, -3.42,
		    -7.48, 8.35, 0.79, 4.89,
		    8.84, 4.09, 4.07, 2.09 };

    real8_t C[] = {  1.284210526316e+00,  1.618226600985e+00,
		     6.455542021924e-02, -2.114035087719e+00,
		     3.622994652406e-01, -5.712574850299e-01,
		     5.063291139241e-01, -1.002044989775e-01,
		     -2.454751131222e-01,  2.122249388753e+00,
		     -1.958230958231e+00, -2.985645933014e+00 };

    real8_t S0[] = { -1.578558225508e+00, -1.214417744917e+00,
		     -9.796672828096e-02,  1.336414048059e+00,
		     -5.009242144177e-01, -8.817005545287e-01,
		     7.393715341959e-02, -9.057301293900e-02,
		     -4.011090573013e-01,  1.604436229205e+00,
		     -1.473197781885e+00, -1.153419593346e+00 };

    real8_t S1[] = { -1.229205175601e+00, -7.504621072089e-01,
		     -1.517560073937e+00, -6.321626617375e-01,
		     -1.382624768946e+00,  1.543438077634e+00,
		     1.460258780037e-01,  9.038817005545e-01,
		     1.634011090573e+00,  7.560073937153e-01,
		     7.523105360444e-01,  3.863216266174e-01 };

    real8_t S2[] = { -8.135338345865e-01, -1.332512315271e+00,
		     -6.589524969549e-01, -1.581871345029e+00,
		     -7.232620320856e-01,  6.479041916168e-01,
		     6.848101265823e+00,  1.106339468303e+00,
		     6.119909502262e-01,  1.322738386308e+00,
		     1.329238329238e+00,  2.588516746411e+00 };

    {
      Matrix  X = Matrix::row_major(3,4,A);
      Matrix  S = Matrix::row_major(3,4,S0);
      real8_t s = 5.41;
      X.div(s);
      EXPECT_TRUE( X.equals(S, 1.0e-12) );
    }

    {
      Matrix X = Matrix::row_major(3,4,A);
      Matrix Y = Matrix::row_major(3,4,B);
      Matrix Z = Matrix::row_major(3,4,C);
      X.div(Y);
      EXPECT_TRUE( X.equals(Z, 1.0e-12) );
    }

    {
      Matrix X = Matrix::row_major(3,4,A);
      Matrix Y = Matrix::row_major(3,4,B);
      Matrix S = Matrix::row_major(3,4,S1);
      real8_t s = 5.41;
      X.div(Y,s);
      EXPECT_TRUE( X.equals(S, 1.0e-12) );
    }

    {
      Matrix X = Matrix::row_major(3,4,A);
      Matrix Y = Matrix::row_major(3,4,B);
      Matrix S = Matrix::row_major(3,4,S2);
      real8_t s = 5.41;
      X.div(s,Y);
      EXPECT_TRUE( X.equals(S, 1.0e-12) );
    }

    {
      Matrix X = Matrix::row_major(3,4,A);
      Matrix Y = Matrix::row_major(3,4,B);
      Matrix Z = Matrix::row_major(3,4,C);
      Matrix T(2);
      T.div(X,Y);
      EXPECT_TRUE( T.equals(Z, 1.0e-12) );
    }

  }

  // =======================================================================================
  TEST(test_matrix_sum, sum) {
    // -------------------------------------------------------------------------------------
    real8_t adat[] = { -5.19, 4.93, 9.4, -6.78, -3.67, -4.44,
		       -7.45, 3.41, -2.93, -0.85, 1.5, 6.11,
		       -0.83, -2, 4.64, -3.36, -0.31, -2.36 };

    Matrix  A = Matrix::row_major(3,6,adat);
    EXPECT_NEAR( -10.18, A.sum(), 1.0e-14 );
  }

  // =======================================================================================
  TEST(test_matrix_sum, square) {
    // -------------------------------------------------------------------------------------
    real8_t adat[] = { -3.79, 7.51, -8.48, -4.27, -4.36,
		       -6.67, -8.46, -2.48, 8.44, 5.05,
		       -8.42, -5.2, -1.42, -7.94, -1.61,
		       -9.42, -8.8, -3.46, -3.98, -1.86 };

    Matrix  A = Matrix::row_major(4,5,adat);
    EXPECT_NEAR( 761.9006, A.sumsq(), 1.0e-12 );
  }

  // =======================================================================================
  TEST(test_matrix_sum, diff) {
    // -------------------------------------------------------------------------------------
    real8_t adat[] = { -6.33, -7.37, -5.05, -5.28, 9.55,
		       0.56, 2.75, -0.84, -7.52, -4.01,
		       1.79, -7.57, 0, 6.32, -1.3,
		       1.01, 5.82, -0.1, -8.45, -7.66 };

    real8_t bdat[] = { 3.01, 6.52, 9.42, 8.64, 9.4,
		       1.18, -4.97, -0.46, 3.86, 8.62,
		       6.86, 5.64, 7.01, 3.06, -4.96,
		       -0.7, 4.61, 5.8, -9.35, 7.91 };

    Matrix  A = Matrix::row_major(4,5,adat);
    Matrix  B = Matrix::row_major(4,5,bdat);
    EXPECT_NEAR( 1588.2914, A.sumsq(B), 1.0e-12 );
  }

  // =======================================================================================
  TEST(test_matrix_linalg, dot) {
    // -------------------------------------------------------------------------------------
    real8_t adat[] = { -8.83, -0.93, -4.11, 0.71, -6.46,
		       9.97, -1.36, -4.26, -3.94, -0.20,
		       -8.93, -5.40, -4.31, 9.49, -8.19,
		       4.19, -3.81, -9.93, 0.14, -3.97 };

    real8_t bdat[] = { 0.30, 7.91, -4.80, -7.02, 8.06, 2.91,
		       1.22, -2.16, 2.71, -4.59, -7.96, -9.99,
		       -5.14, 9.41, 1.80, -3.75, 1.00, -1.91,
		       6.57, 0.58, 6.56, 8.47, -6.06, 1.11,
		       -4.67, -3.92, 0.53, 5.05, 9.57, 5.45 };

    real8_t cdat[] = { 52.1747, -80.7766, 33.6995, 55.0585, -134.0018, -42.9734,
		       -1.7236, 40.2125, -85.1620, -82.1538, 108.8862, 45.2723,
		       113.4830, -61.9204, 78.3857, 142.6579, -169.1895, 2.0902,
		       67.1087, -36.4252, -49.4968, 6.4489, 15.3277, 47.7400 };

    Matrix  A = Matrix::row_major(4,5,adat);
    Matrix  B = Matrix::row_major(5,6,bdat);
    Matrix  C = Matrix::row_major(4,6,cdat);
    Matrix  T(2);

    T.dot(A,B);

    EXPECT_TRUE( T.equals(C, 1.0e-13) );
  }


  // =======================================================================================
  TEST(test_matrix_linalg, trans) {
    // -------------------------------------------------------------------------------------
    Matrix X = Matrix::row_major(3,5,RowMajor);
    Matrix T = Matrix::column_major(5,3,RowMajor);
    Matrix A(2);
    A.T(X);
    EXPECT_TRUE( A.equals(T) );
  }


  // =======================================================================================
  TEST(test_matrix_linalg, inverse_posdet_2x2) {
    // -------------------------------------------------------------------------------------
    real8_t adat[] = { 3.06, -6.56,
		       4.44, -2.31 };

    real8_t bdat[] = { -1.047248592334684147e-01,  2.974004660482912898e-01,
		       -2.012893398253678967e-01,  1.387264369066724679e-01 };


    Matrix  A1 = Matrix::row_major(2,2,adat);
    Matrix  A2 = Matrix::row_major(2,2,adat);
    Matrix  B  = Matrix::row_major(2,2,bdat);
    real8_t d  = 22.0578;
    Matrix C(2);
    Matrix E(2);

    real8_t D = C.inverse(A1);
    EXPECT_TRUE( C.equals(B) );
    EXPECT_NEAR( d, D, 1.0e-9 );
    E.dot( A2, B );
    EXPECT_NEAR( D_TWO, E.sum(), 1.0e-9 );
  }


  // =======================================================================================
  TEST(test_matrix_linalg, inverse_negdet_2x2) {
    // -------------------------------------------------------------------------------------
    real8_t adat[] = { -9.84, 6.11,
		       4.55, -0.50 };

    real8_t bdat[] = {  2.185266930355542550e-02,  2.670396188894473277e-01,
			1.988592906623543877e-01,  4.300605318939708654e-01 };


    Matrix  A1 = Matrix::row_major(2,2,adat);
    Matrix  A2 = Matrix::row_major(2,2,adat);
    Matrix  B  = Matrix::row_major(2,2,bdat);
    real8_t d  = -2.288049999999999784e+01;
    Matrix C(2);
    Matrix E(2);

    real8_t D = C.inverse(A1);
    EXPECT_TRUE( C.equals(B) );
    EXPECT_NEAR( d, D, 1.0e-9 );
    E.dot( A2, B );
    EXPECT_NEAR( D_TWO, E.sum(), 1.0e-9 );
  }


  // =======================================================================================
  TEST(test_matrix_linalg, inverse_posdet_3x3) {
    // -------------------------------------------------------------------------------------
    real8_t adat[] = { 5.10, 8.52, 1.75,
		       4.44, -3.49, -6.32,
		       -2.40, -4.89, -9.24 };

    real8_t bdat[] = {  3.101409350807406845e-03,  1.620624965303155973e-01,
			-1.102605532151170603e-01,
			1.297880224125189941e-01, -9.913977880105498408e-02,
			9.239095684465106761e-02,
			-6.949207922501683676e-02,  1.037267604593089532e-02,
			-1.284812176681886242e-01 };


    Matrix  A1 = Matrix::row_major(3,3,adat);
    Matrix  A2 = Matrix::row_major(3,3,adat);
    Matrix  B  = Matrix::row_major(3,3,bdat);
    real8_t d  =  4.329644519999997101e+02;
    Matrix C(2);
    Matrix E(2);

    real8_t D = C.inverse(A1);
    EXPECT_TRUE( C.equals(B) );
    EXPECT_NEAR( d, D, 1.0e-9 );
    E.dot( A2, B );
    EXPECT_NEAR( D_THREE, E.sum(), 1.0e-9 );
  }

  
  // =======================================================================================
  TEST(test_matrix_linalg, inverse_negdet_3x3) {
    // -------------------------------------------------------------------------------------
    real8_t adat[] = { -1.35, 1.72, -0.26,
		       -7.34, 5.61, 2.85,
		       -7.37, -3.47, 3.33 };

    real8_t bdat[] = { -5.710760270195945898e-01,  9.645058104009517075e-02,
		       -1.271363132100198079e-01,
		       -6.871309372104593416e-02,  1.281577051549671054e-01,
		       -1.150495087264649385e-01,
		       -1.335514941245177667e+00,  3.470114171631343281e-01,
		       -1.009658929845883568e-01 };


    Matrix  A1 = Matrix::row_major(3,3,adat);
    Matrix  A2 = Matrix::row_major(3,3,adat);
    Matrix  B  = Matrix::row_major(3,3,bdat);
    real8_t d  = -5.002976600000001639e+01;
    Matrix C(2);
    Matrix E(2);

    real8_t D = C.inverse(A1);
    EXPECT_TRUE( C.equals(B) );
    EXPECT_NEAR( d, D, 1.0e-9 );
    E.dot( A2, B );
    EXPECT_NEAR( D_THREE, E.sum(), 1.0e-9 );
  }

  
  // =======================================================================================
  TEST(test_matrix_linalg, inverse_posdet_4x4) {
    // -------------------------------------------------------------------------------------
    real8_t adat[] = { 4.91, -9.61, -2.50, -9.80,
		       5.32, -4.26, -6.57, -6.28,
		       -4.80, -9.37, -6.77, -9.33,
		       2.75, -0.87, -4.80, -3.86 };

    real8_t bdat[] = {  2.061340944673956121e-02,  1.506389459799720443e-01,
			-7.995807208915932385e-02, -1.041490105545120615e-01,
			7.949116226201297097e-02, -4.387806830590601503e-01,
			-4.681240016291923073e-02,  6.252044023220741931e-01,
			1.683820513214201731e-01, -3.030390456127530774e-01,
			-5.287032417812830010e-02,  1.933215616787846147e-01,
			-2.126176895161228375e-01,  5.830527758154196993e-01,
			1.933151449522471296e-02, -7.145805971770150533e-01 };


    Matrix  A1 = Matrix::row_major(4,4,adat);
    Matrix  A2 = Matrix::row_major(4,4,adat);
    Matrix  B  = Matrix::row_major(4,4,bdat);
    real8_t d  =  8.873683437600005846e+02;
    Matrix C(2);
    Matrix E(2);

    real8_t D = C.inverse(A1);
    EXPECT_TRUE( C.equals(B) );
    EXPECT_NEAR( d, D, 1.0e-9 );
    E.dot( A2, B );
    EXPECT_NEAR( D_FOUR, E.sum(), 1.0e-9 );
  }

  
  // =======================================================================================
  TEST(test_matrix_linalg, inverse_negdet_4x4) {
    // -------------------------------------------------------------------------------------
    real8_t adat[] = { -6.79, -6.47, -4.99, 3.83,
		       1.49, 7.74, -9.80, 4.85,
		       6.04, -1.98, 4.74, 3.87,
		       -7.78, -6.65, -2.03, -1.39 };

    real8_t bdat[] = { -8.261684548086749569e-01,  4.836246669244150254e-01,
		       6.345580020841878888e-01,  1.177765410598557327e+00,
		       5.982145809849532814e-01, -3.474371204035937022e-01,
		       -5.103385229178012406e-01, -9.848332895517617480e-01,
		       7.075646079177156933e-01, -4.759431463576858090e-01,
		       -4.968734989574165040e-01, -1.094426080917356936e+00,
		       7.288542883371140757e-01, -3.496247991956463741e-01,
		       -3.845013495885238886e-01, -1.001574514154910167e+00 };


    Matrix  A1 = Matrix::row_major(4,4,adat);
    Matrix  A2 = Matrix::row_major(4,4,adat);
    Matrix  B  = Matrix::row_major(4,4,bdat);
    real8_t d  = -5.584343572000007043e+02;
    Matrix C(2);
    Matrix E(2);

    real8_t D = C.inverse(A1);
    EXPECT_TRUE( C.equals(B) );
    EXPECT_NEAR( d, D, 1.0e-9 );
    E.dot( A2, B );
    EXPECT_NEAR( D_FOUR, E.sum(), 1.0e-9 );
  }

  
  // =======================================================================================
  TEST(test_matrix_linalg, inverse_posdet_nxn) {
    // -------------------------------------------------------------------------------------
    real8_t adat[] = { 1.26, -8.86, -5.99, 8.49, 7.82, -4.71, -5.47, 2.76,
		       0.21, -3.46, 3.33, 5.51, 5.47, -6.43, -0.11, -6.51,
		       -0.97, 0.63, 0.71, 6.82, 8.24, -1.01, -8.73, 5.25,
		       4.38, 3.91, -2.14, 1.32, 6.03, 1.24, -3.26, -8.46,
		       -9.58, 6.01, -1.52, 1.06, 7.96, -4.52, 6.58, 6.88,
		       -1.97, -6.26, -8.21, 8.60, 5.97, 6.77, 2.47, 0.25,
		       -4.04, -1.14, -7.18, 7.72, -9.15, -6.73, -8.31, -6.34,
		       3.96, -5.03, 2.10, 0.04, -7.72, 5.07, -3.41, 9.12 };

    real8_t bdat[] = {  5.037979027903301960e-02,  6.989719390340994043e-02,
			-1.295865946742462971e-01,  2.286330914404325065e-01,
			1.248871811185752606e-01, -4.600318275428128684e-02,
			2.999390543077059667e-03,  2.304650452196053689e-01,
			-3.855994881490071302e-02,  3.049689559257892993e-02,
			-3.855469915291225014e-02,  1.656628963822558975e-01,
			1.235872686490152167e-01, -2.273639415484182691e-02,
			3.400532136034312147e-02,  1.403374945878892721e-01,
			-6.956963217383067832e-02,  7.609566139814348540e-02,
			6.030779649211158444e-02, -5.511391613802762990e-02,
			-3.122685326592911093e-02,  2.717126702310857303e-03,
			-2.038990604583698976e-02, -1.161760651996032213e-03,
			-5.021071589947857100e-02,  1.340487028162507255e-01,
			-4.958798626639053519e-02,  1.540302493360300173e-01,
			1.330231198308610974e-01,  3.357179185744661731e-02,
			4.976727843795830664e-02,  2.156364036615886215e-01,
			2.573437618358109455e-02, -2.675494440779613639e-02,
			4.414707936409579397e-02, -3.346880355906400872e-02,
			-3.560608690399279935e-02,  4.079888424886466552e-03,
			-4.169567662017265725e-02, -8.558338762184948545e-02,
			-6.374859818116211663e-02, -3.559670568710921607e-02,
			6.697761868387726303e-02, -5.246664027263371610e-02,
			-6.890519427587897539e-02,  6.649136182801125561e-02,
			-1.900237934813496510e-02, -5.639461477478528023e-02,
			-4.340921112434681546e-03,  8.187164780735183001e-02,
			-1.160215429527080427e-01,  1.030175825248164506e-01,
			1.135927476389306384e-01,  1.281177526055045715e-02,
			6.444780925928701980e-04,  1.365101054488929155e-01,
			2.869697149993839097e-02, -3.886720838492915484e-03,
			-2.191059325845228986e-02,  4.346403505821868490e-02,
			7.118068033649574411e-02, -2.205774219632321981e-02,
			-2.560701586213474761e-03,  9.624853771692792881e-02 };


    Matrix  A1 = Matrix::row_major(8,8,adat);
    Matrix  A2 = Matrix::row_major(8,8,adat);
    Matrix  B  = Matrix::row_major(8,8,bdat);
    real8_t d  =  1.813948733705045283e+08;
    Matrix C(2);
    Matrix E(2);

    real8_t D = C.inverse(A1);
    EXPECT_TRUE( C.equals(B) );
    EXPECT_NEAR( d, D, 1.0e-7 );
    E.dot( A2, B );
    EXPECT_NEAR( D_EIGHT, E.sum(), 1.0e-7 );
  }

  
  // =======================================================================================
  TEST(test_matrix_linalg, inverse_negdet_nxn) {
    // -------------------------------------------------------------------------------------
    real8_t adat[] = { 5.51, -2.08, 9.91, 3.55, -4.46, 2.51, -1.13, 2.78,
		       -9.47, -2.76, 0.33, 8.86, -2.82, -9.93, 8.74, -4.43,
		       -8.37, 4.54, 3.86, -9.15, -0.97, 9.63, 9.73, 8.55,
		       1.19, -0.49, 2.98, 3.40, -7.73, 0.00, 3.96, -7.47,
		       -2.69, -8.86, 8.09, 9.82, -9.16, 7.80, 9.38, 8.23,
		       -7.22, -1.84, 6.80, 3.05, 1.81, 9.67, -9.20, 4.34,
		       0.63, 3.26, -1.38, 4.48, -9.35, 8.40, -2.84, -3.50,
		       -6.43, -6.20, -3.68, 9.04, 3.97, 9.27, -9.49, 3.63 };

    real8_t bdat[] = {  1.624428660532193647e-01, -6.435308666446028399e-03,
			5.250255385830921578e-02,  3.150220325140775518e-02,
			-6.879250519727338198e-02, -1.398072316896516731e-01,
			-1.802905529841984308e-02,  1.146416108929325384e-01,
			3.242740194272665244e-01,  1.241355729886510217e-01,
			1.616182397007683569e-01, -4.906113331943397216e-02,
			-2.041070336825080156e-01, -1.919524248346524686e-01,
			7.243663890422268048e-02,  1.836140072034141979e-01,
			1.238965057113921714e-01,  2.677833695141894690e-02,
			4.746664190941941863e-02,  5.701247797380073340e-02,
			-5.974380858660022220e-02, -3.186258570716126240e-03,
			-4.446083703853579566e-02,  3.970968214479981412e-02,
			3.178991856191232812e-01,  1.144975997023772035e-01,
			1.312422884892749386e-01,  6.132736428699880026e-03,
			-1.638147031726815694e-01, -2.146290533046215365e-01,
			1.827615821320962772e-02,  2.454011728371667811e-01,
			3.460110570734672431e-01,  7.119952464472428799e-02,
			1.942627309583273010e-01,  1.232314382603743041e-01,
			-2.252303478984356011e-01, -2.492429222138585476e-01,
			-1.049469263446407702e-01,  3.253833203937229190e-01,
			1.371568350718417595e-01, -8.150606905171609018e-03,
			1.104510675810079501e-01,  1.152128602994759582e-01,
			-8.865292325625506731e-02, -1.190600884928021963e-01,
			-3.167073763048403739e-02,  1.747567518680119003e-01,
			1.889600829803772530e-01,  4.528101481006604340e-02,
			1.341547084742882867e-01,  8.964902332624924419e-02,
			-1.019758220728563397e-01, -1.838254280664486928e-01,
			-5.052038145965923044e-02,  1.813177272931812134e-01,
			-5.915689201695713273e-02,  3.955465618466392705e-03,
			-5.347239482705123254e-02, -1.800927469833390748e-01,
			8.304540278325084346e-02,  5.182748919033960955e-02,
			6.477592299139359189e-02, -1.068331154875092059e-01 };


    Matrix  A1 = Matrix::row_major(8,8,adat);
    Matrix  A2 = Matrix::row_major(8,8,adat);
    Matrix  B  = Matrix::row_major(8,8,bdat);
    real8_t d  = -1.169729783055361509e+08;
    Matrix C(2);
    Matrix E(2);

    real8_t D = C.inverse(A1);
    EXPECT_TRUE( C.equals(B) );
    EXPECT_NEAR( d, D, 1.0e-6 );
    E.dot( A2, B );
    EXPECT_NEAR( D_EIGHT, E.sum(), 1.0e-9 );
  }

  
} // end namespace


// =======================================================================================
// **                              U T E S T _ M A T R I X                              **
// ======================================================================== END FILE =====
