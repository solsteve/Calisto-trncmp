// ====================================================================== BEGIN FILE =====
// **                              U T E S T _ L I N A L G                              **
// =======================================================================================
// **                                                                                   **
// **  This file is part of the TRNCMP Research Library, `Callisto' (formerly SolLib.)  **
// **                                                                                   **
// **  Copyright (c) 2019-, Stephen W. Soliday                                          **
// **                       stephen.soliday@trncmp.org                                  **
// **                       http://research.trncmp.org                                  **
// **                                                                                   **
// **  -------------------------------------------------------------------------------  **
// **                                                                                   **
// **  Callisto is free software: you can redistribute it and/or modify it under the    **
// **  terms of the GNU General Public License as published by the Free Software        **
// **  Foundation, either version 3 of the License, or (at your option)                 **
// **  any later version.                                                               **
// **                                                                                   **
// **  Callisto is distributed in the hope that it will be useful, but WITHOUT          **
// **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS    **
// **  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.   **
// **                                                                                   **
// **  You should have received a copy of the GNU General Public License along with     **
// **  Callisto. If not, see <https://www.gnu.org/licenses/>.                           **
// **                                                                                   **
// ----- Modification History ------------------------------------------------------------
//
/** @brief  Automated testing for Vector class methods.
 *  @file   utest_linalg.cc
 *  @author Stephen W. Soliday
 *  @date   2019-Jul-23
 *
 *  Provides automated testing for the LinAlg methods.
 */
// =======================================================================================


#include <limits.h>
#include <LinAlg.hh>
#include <gtest/gtest.h>
#include <array_print.hh>
#include <Dice.hh>
#include <Statistics.hh>
#include <EigenSystem.hh>
#include <PCA.hh>

namespace {

#define checkAV( _v, _b, _n ) {                         \
    for ( int32_t _i=0; _i<(int32_t)_n; _i++ ) {        \
      EXPECT_DOUBLE_EQ( _v[_i], _b(_i) );               \
    }                                                   \
  }


#define checkAVe( _v, _b, _n, _e ) {                    \
    for ( int32_t _i=0; _i<(int32_t)_n; _i++ ) {        \
      EXPECT_NEAR( _v[_i], _b(_i), _e );                \
    }                                                   \
  }


#define checkAM( v, b, nr, nc ) {               \
    int32_t idx = 0;                            \
    for ( int32_t r=0; r<(int32_t)nr; r++ ) {   \
      for ( int32_t c=0; c<(int32_t)nc; c++ ) { \
	EXPECT_DOUBLE_EQ( v[idx], b(r,c) );     \
	idx++;                                  \
      }                                         \
    }                                           \
  }


#define checkAMe( v, b, nr, nc, ep ) {          \
    int32_t idx = 0;                            \
    for ( int32_t r=0; r<(int32_t)nr; r++ ) {   \
      for ( int32_t c=0; c<(int32_t)nc; c++ ) { \
	EXPECT_NEAR( v[idx], b(r,c), ep );      \
	idx++;                                  \
      }                                         \
    }                                           \
  }


static u_int32_t SEED_MATTER[] = { 0x29341EA3, 0x9257677C, 0xCC98B1D1, 0x7C5EB68C,
                                   0x13ED5BC5, 0x3C91F88F, 0xE1A42570, 0x24CA88CD,
                                   0xAE36E97A, 0x59BADCBB, 0x4B9ED120, 0x952318E6,
                                   0xDD62B887, 0xCFC13ED9, 0x0F6A241B, 0x43970DA6,
                                   0xDF52E725, 0x4F6FE0ED, 0xCF9D4A7B, 0xA8742AE2,
                                   0x3B0590CF, 0xE20ACC41, 0x10A25D9B, 0xD59349FF,
                                   0x10BEE39E, 0x33CE2526, 0xD8029C5B, 0xFC6D3D65,
                                   0xD08E3996, 0x6FCFC48D, 0x2FD4F96B, 0x1AAEC36F };


// =======================================================================================
TEST(test_linalg_slice, get_row) {
  // -------------------------------------------------------------------------------------
  real8_t adat[] = { 1.1, 1.2, 1.3, 1.4,
                     2.1, 2.2, 2.3, 2.4,
                     3.1, 3.2, 3.3, 3.4 };
  
  real8_t r0[] = { 1.1, 1.2, 1.3, 1.4 };
  real8_t r1[] = { 2.1, 2.2, 2.3, 2.4 };
  real8_t r2[] = { 3.1, 3.2, 3.3, 3.4 };
  
  Matrix M = Matrix::row_major(3,4,adat);
  Vector V0;
  Vector V1;
  Vector V2;

  getRow( V0, M, 0 );
  getRow( V1, M, 1 );
  getRow( V2, M, 2 );

  checkAV( r0, V0, 4 );
  checkAV( r1, V1, 4 );
  checkAV( r2, V2, 4 );
}


// =======================================================================================
TEST(test_linalg_slice, set_row) {
  // -------------------------------------------------------------------------------------
  real8_t test[] = { 1.1, 1.2, 1.3, 1.4,
                     2.1, 2.2, 2.3, 2.4,
                     3.1, 3.2, 3.3, 3.4 };
  
  real8_t r0[] = { 1.1, 1.2, 1.3, 1.4 };
  real8_t r1[] = { 2.1, 2.2, 2.3, 2.4 };
  real8_t r2[] = { 3.1, 3.2, 3.3, 3.4 };
  
  Matrix M(3,4);
  Vector V0( 4, r0 );
  Vector V1( 4, r1 );
  Vector V2( 4, r2 );

  M.set(9.9);

  setRow( M, V0, 0 );
  setRow( M, V1, 1 );
  setRow( M, V2, 2 );

  checkAM( test, M, 3, 4 );
}


// =======================================================================================
TEST(test_linalg_slice, get_column) {
  // -------------------------------------------------------------------------------------
  real8_t adat[] = { 1.1, 1.2, 1.3,
                     2.1, 2.2, 2.3,
                     3.1, 3.2, 3.3,
                     4.1, 4.2, 4.3 };
  
  real8_t c0[] = { 1.1, 2.1, 3.1, 4.1 };
  real8_t c1[] = { 1.2, 2.2, 3.2, 4.2 };
  real8_t c2[] = { 1.3, 2.3, 3.3, 4.3 };
  
  Matrix M = Matrix::row_major(4,3,adat);
  Vector V0;
  Vector V1;
  Vector V2;

  getCol( V0, M, 0 );
  getCol( V1, M, 1 );
  getCol( V2, M, 2 );

  checkAV( c0, V0, 4 );
  checkAV( c1, V1, 4 );
  checkAV( c2, V2, 4 );
}


// =======================================================================================
TEST(test_linalg_slice, set_column) {
  // -------------------------------------------------------------------------------------
  real8_t test[] = { 1.1, 1.2, 1.3, 1.4,
                     2.1, 2.2, 2.3, 2.4,
                     3.1, 3.2, 3.3, 3.4 };
  
  real8_t r0[] = { 1.1, 2.1, 3.1 };
  real8_t r1[] = { 1.2, 2.2, 3.2 };
  real8_t r2[] = { 1.3, 2.3, 3.3 };
  real8_t r3[] = { 1.4, 2.4, 3.4 };
  
  Matrix M(3,4);
  Vector V0( 4, r0 );
  Vector V1( 4, r1 );
  Vector V2( 4, r2 );
  Vector V3( 4, r3 );

  M.set(9.9);

  setCol( M, V0, 0 );
  setCol( M, V1, 1 );
  setCol( M, V2, 2 );
  setCol( M, V3, 3 );

  checkAM( test, M, 3, 4 );
}

// =======================================================================================
TEST(test_linalg_slice, get_diagonal) {
  // -------------------------------------------------------------------------------------
  real8_t adat[] = { 1.1, 1.2, 1.3,
                     2.1, 2.2, 2.3,
                     3.1, 3.2, 3.3,
                     4.1, 4.2, 4.3 };

  real8_t d[] = { 1.1, 2.2, 3.3 };

  Matrix M = Matrix::row_major(4,3,adat);

  Vector V;

  getDiag( V, M );
 
  checkAV( d, V, 3 );
}


// =======================================================================================
TEST(test_linalg_slice, set_diagonal) {
  // -------------------------------------------------------------------------------------
  real8_t test[] = { 1.1, 9.9, 9.9,
                     9.9, 2.2, 9.9,
                     9.9, 9.9, 3.3 };
  
  real8_t d[] = { 1.1, 2.2, 3.3 };
  
  Matrix M(3);
  Vector V( 3, d );

  M.set(9.9);

  setDiag( M, V );

  checkAM( test, M, 3, 3 );
}


// =======================================================================================
TEST(test_linalg_dot, v_dot_M) {
  // -------------------------------------------------------------------------------------
  real8_t vdat[] = { 2.26, 1.28, 1.91, 1.08, 1.52 };

  real8_t mdat[] = { 7.02, -2.75, 8.77, 7.77, 7.86, -5.47, 3.71,
                     -7.55, 3.50, 3.19, 7.96, 8.10, 8.48, -9.49,
                     -6.30, 9.57, -1.26, -5.23, 3.32, -5.75, 6.77,
                     1.88, 5.19, 8.06, -8.92, -3.46, 1.59, 5.18,
                     7.78, -6.71, -8.28, 2.33, -9.24, 6.51, -0.35 };

  real8_t adat[] = { 8.0242, 11.9497, 17.6160, 11.6677, 16.6912, -0.8779, 14.2305 };


  Vector  V(5,vdat);
  Matrix  M = Matrix::row_major(5,7,mdat);
  Vector  A;

  dot( A, V, M );

  EXPECT_EQ( 7, A.size() );
  checkAVe( adat, A, 7, 10.e-14 );
}


// =======================================================================================
TEST(test_linalg_dot, M_dot_v) {
  // -------------------------------------------------------------------------------------
  real8_t vdat[] = { 1.11, 4.25, -9.06, 6.71 };

  real8_t mdat[] = { -1.97, -1.75, 7.06, -1.54,
                     1.13, 7.76, -5.99, 6.25,
                     -0.35, 8.76, 3.49, -3.42,
                     -5.18, 0.63, -8.14, -0.83,
                     -0.80, -9.15, -5.47, -7.88 };

  real8_t adat[] = { -83.9212, 130.4412, -17.7261, 65.1068, -43.0921 };


  Matrix  M = Matrix::row_major(5,4,mdat);
  Vector  V(4,vdat);
  Vector  A;

  dot( A, M, V );

  checkAVe( adat, A, 5, 1.0e-14 );
}


// =======================================================================================
TEST(test_linalg_dot, v_dot_M_pb) {
  // -------------------------------------------------------------------------------------
  real8_t vdat[] = { 2.88, 0.26, 4.82, 1.23 };

  real8_t mdat[] = { -8.22, 7.38, -7.51, -4.06, -4.81, 4.37, 6.24, 1.12,
                     2.30, 8.72, -7.40, 7.88, -6.50, 7.10, -1.30, -6.57,
                     -2.83, -4.86, 5.96, 6.82, 7.04, 2.73, 3.78, 8.92,
                     1.84, 9.38, -8.82, 3.40, -1.87, -2.97, 3.06, -8.86 };

  real8_t adat[] = { -31.7230, 11.3638, -7.6142, 30.6504, 15.5699, 17.7771, 41.6366, 32.5640 };

  real8_t bdat[] = { 2.73, -0.27, -1.94, 3.24, -0.52, -6.16, 2.02, -1.05 };


  Vector  V(4,vdat);
  Vector  B(8,bdat);
  Matrix  M = Matrix::row_major(4,8,mdat);
  Vector  A;

  dotAdd( A, V, M, B );

  checkAVe( adat, A, 8, 1.0e-14 );
}


// =======================================================================================
TEST(test_linalg_dot, M_dot_v_pb) {
  // -------------------------------------------------------------------------------------
  real8_t vdat[] = { -7.38, 1.13, -0.33, 3.65 };

  real8_t mdat[] = { -6.78, 2.92, -8.06, 1.43, -1.40, 4.67, 9.05, -9.90,
                     6.57, -8.46, 1.32, -7.43, -1.74, -0.07, 5.95, 1.04,
                     8.25, -6.58, -2.49, 2.20, -8.84, 7.14, 0.22, -0.80,
                     2.69, -6.45, -3.82, 7.16, -8.48, -5.31, 2.87, 1.89 };

  real8_t adat[] = { 62.6465, -54.1805, 48.0931, 15.3287, -26.6390, -59.5514, -57.2626, 88.3297 };

  real8_t bdat[] = { -1.91, -1.70, 0.24, 8.87, -6.97, -3.27, -7.60, 6.93 };


  Vector  V(4,vdat);
  Vector  B(8,bdat);
  Matrix  M = Matrix::row_major(4,8,mdat);
  Vector  A;

  dotAdd( A, V, M, B );

  checkAVe( adat, A, 8, 1.0e-13 );
}


// =======================================================================================
TEST(test_linalg_mul, outer) {
  // -------------------------------------------------------------------------------------
  real8_t cdat[] = { 0.65, 6.48, 0.40, -8.14 };

  real8_t rdat[] = { -7.48, -1.18, 7.81, -1.44, 0.25, 7.69, 2.97, -2.99 };

  real8_t adat[] = { -4.8620, -0.7670, 5.0765, -0.9360, 0.1625, 4.9985, 1.9305, -1.9435,
                     -48.4704, -7.6464, 50.6088, -9.3312, 1.6200, 49.8312, 19.2456, -19.3752,
                     -2.9920, -0.4720, 3.1240, -0.5760, 0.1000, 3.0760, 1.1880, -1.1960,
                     60.8872, 9.6052, -63.5734, 11.7216, -2.0350, -62.5966, -24.1758, 24.3386 };

  Vector  C(4,cdat);
  Vector  R(8,rdat);
  Matrix  A;

  outer( A, C, R );

  checkAMe( adat, A, 4, 8, 1.0e-14 );
}

// =======================================================================================
TEST(test_linalg_mul, aMa) {
  // -------------------------------------------------------------------------------------
  real8_t vdat[] = { -9.24, 3.45, 2.82, 8.51, -2.21 };

  real8_t mdat[] = { -0.22, -0.49, 6.15, 1.40, -1.82,
                     -4.94, -8.25, 9.83, -5.22, -2.61,
                     4.85, -3.70, 0.39, 7.03, 1.03,
                     -5.52, 8.51, 9.43, -0.59, -9.38,
                     7.07, 7.48, -4.73, -3.84, 0.06 };

  real8_t test =  9.47132838e+02;

  Vector  V(5,vdat);
  Matrix  M = Matrix::row_major(5,5,mdat);

  real8_t s = vMv( V, M );

  EXPECT_NEAR( test, s, 1.0e-32 );
}

// =======================================================================================
TEST(test_linalg_mul, rMc) {
  // -------------------------------------------------------------------------------------
  real8_t rdat[] = { 3.91, 7.06, 6.67, -4.66, -5.49 };

  real8_t cdat[] = { 8.42, -4.21, -5.48, -3.56, 5.47 };

  real8_t mdat[] = { -3.76, -0.08, 0.25, -4.75, 3.16,
                     2.02, 5.50, 4.03, 0.82, 9.82,
                     -4.42, 0.28, 2.89, 3.51, 6.29,
                     3.80, 8.19, -1.63, -4.80, 1.41,
                     -5.03, -6.11, -6.81, -9.14, -2.99 };

  real8_t test = -3.98450227e+02;

  Vector  R(5,rdat);
  Vector  C(5,cdat);
  Matrix  M = Matrix::row_major(5,5,mdat);

  real8_t s = vMv( R, M, C );

  EXPECT_NEAR( test, s, 1.0e-13 );
}

// =======================================================================================
TEST(test_linalg_mul, vmMvm) {
  // -------------------------------------------------------------------------------------
  real8_t vdat[] = { -7.94, 1.84, 7.16, -3.66, 8.42, 6.77, 2.58 };

  real8_t mdat[] = { 6.02, -7.36, -4.55, 5.55, 0.23, -7.58, -7.46 };

  real8_t sdat[] = { 7.49, 3.08, -9.94, -7.18, -9.03, -3.80, -4.21,
                     7.26, -1.55, 1.85, 0.62, 6.56, 1.66, -3.57,
                     -0.18, -3.83, -6.96, 1.15, 8.02, 1.98, -6.74,
                     4.91, -1.61, -9.38, -2.86, 6.53, -5.81, -8.69,
                     -0.47, 0.82, 6.41, 6.93, 3.03, -7.79, -7.10,
                     7.98, -4.15, 8.40, -4.01, 7.47, -0.37, -5.95,
                     -2.39, 9.26, -1.00, 0.62, -5.35, -6.31, 0.47 };

  real8_t test =  3.44458873e+03;

  Vector  V(7,vdat);
  Vector  mu(7,mdat);
  Matrix  S = Matrix::row_major(7,7,sdat);

  real8_t s = vMv( V, mu, S );

  EXPECT_NEAR( test, s, 1.0e-11 );
}


// =======================================================================================
TEST( test_linalg_rotation, threed ) {
  // -------------------------------------------------------------------------------------

  real8_t vdat[] = { 1.1, 2.3, -3.1 };
    
  const real8_t ang1 = D_PI / 5.0;
  const real8_t ang2 = D_PI / 6.0;
  const real8_t ang3 = D_PI / 7.0;
    
  Matrix Rt(3), R(3), RI(3), R1T(3), R2T(3), R3T(3);
    
  Matrix R1 = Matrix::ROT1( ang1 );
  Matrix R2 = Matrix::ROT2( ang2 );
  Matrix R3 = Matrix::ROT3( ang3 );

  Vector Pt = Vector( 3, vdat );
  Vector At = Vector( 3 );
  Vector Bt = Vector( 3 );

  Rt.dot( R2, R1 );
  R.dot( R3, Rt );
    
  dot( At, R, Pt );

  R1T.T(R1);
  R2T.T(R2);
  R3T.T(R3);
    

  Rt.dot( R2T, R3T );
  RI.dot( R1T, Rt );

  dot( Bt, RI, At );

  //    std::cout << toString( Pt ) << "\n";
  //    std::cout << toString( Bt ) << "\n";
    
  //    std::cout << toString( R ) << "\n";
  //    std::cout << toString( RI ) << "\n";
    
}


// =======================================================================================
TEST( test_linalg_covariance, two ) {
  // -------------------------------------------------------------------------------------

  real8_t real_cov[2][2] = { { 3.9842820272076608e+01,  1.0508962130725287e+01 },
                             { 1.0508962130725287e+01,  1.0748374022421929e+01 } };

  real8_t real_cor[2][2] = { { 1.0e+00,                 2.4539572013600065e-02 },
                             { 2.4539572013600065e-02,  1.0e+00 } };
    
  real8_t data[][2] = { {  4.6791983947366438e+00,  4.0073195594577921e-01 },
                        {  1.5311477688611106e+01,  1.1182025551472540e+01 },
                        {  5.2333846060417271e+00,  4.7599574951033388e+00 },
                        { -7.2904023448993782e-01,  6.5121379435255591e+00 },
                        {  1.3154553135863791e+01,  1.0645407964931266e+01 },
                        {  1.6615180710391630e+00,  3.7989441944260629e+00 },
                        {  2.2305151996169958e+00,  4.9689744025501916e+00 },
                        {  1.8502478116941216e+01,  5.9698879212670999e+00 },
                        {  1.1542729905070792e+00,  9.1525564436341451e+00 },
                        {  4.6767394906997666e+00,  4.3565984095824835e+00 },
                        {  1.0507550253035335e+01,  9.8322097673138327e+00 },
                        {  1.2979590603310848e+01,  7.7563159512589461e+00 },
                        {  1.2138920283896962e+01,  7.0296306000911892e+00 },
                        {  5.7609534085298275e+00,  7.2472733046510207e+00 },
                        {  9.0370677905212951e+00,  9.2286403755639448e+00 },
                        { -8.0253765201967138e+00,  1.3449808349294967e-01 },
                        {  1.3508964253069319e+01,  4.3798935834920893e+00 },
                        {  1.1138203578482086e+01,  5.6469412352897539e+00 },
                        {  8.9522616270948472e+00,  2.4728891456795679e+00 },
                        {  9.9918496394404315e+00,  8.3350735731652712e+00 },
                        {  9.6609131604915177e+00,  1.3368710501657581e+01 },
                        {  2.5417942300781682e-01,  4.7218087661822583e+00 },
                        {  1.0753637580301481e+01,  9.2886166556076741e+00 },
                        {  1.0238731420158373e+01,  7.7043374596957594e+00 },
                        {  1.1270962328163948e+01,  5.0246107849024337e+00 },
                        {  5.5856343393373411e+00,  4.6070449079598061e+00 },
                        { -1.7320423253095292e+00,  3.0675899119578052e+00 },
                        {  8.3821061786692290e+00,  6.7672181972935466e+00 },
                        {  7.9292844600768912e+00,  3.8430468092004757e+00 },
                        {  1.7767500054733336e+01,  8.2038152288505941e+00 },
                        {  1.8433669839881279e+01,  2.4595749167499736e+00 },
                        {  9.5612240179177679e+00,  9.6975357011561005e+00 },
                        {  2.1379458006781796e+01,  1.0762420392943262e+01 },
                        {  4.9181607865792101e+00,  2.9220725900654854e+00 },
                        {  1.2581192831691530e+01,  6.9454068793343975e+00 },
                        { -1.0145738490656042e+00,  1.5754239301395880e+00 },
                        {  5.9342277376615229e+00,  6.2704995772790362e+00 },
                        {  4.0976575690085353e+00, -3.0454878498964366e-01 },
                        {  5.9998827611404337e-01,  1.6128715871047699e+00 },
                        {  1.2762616881142936e+01,  3.9000825983926450e+00 } };

  const int32_t ns = sizeof(data) / sizeof(data[0]);

  // -------------------------------------------------------------------------------------

  Table tab(ns,2);
  for ( int32_t i=0; i<ns; i++ ) {
    tab(i,0) =  data[i][0];
    tab(i,1) =  data[i][1];
  }

  Matrix cov;
  Matrix cor;

  covariance( cov, tab );
  correlate(  cor, cov );

  for ( int32_t i=0; i<2; i++ ) {
    for ( int32_t j=0; j<2; j++ ) {
      EXPECT_DOUBLE_EQ( real_cov[i][j], cov.get(i,j) );
      EXPECT_DOUBLE_EQ( real_cor[i][j], cor.get(i,j) );
    }
  }

  //std::cout << "Cov = \n" << toString( cov, "%23.16e" ) << "\n"
  //          << "Cor = \n" << toString( cor, "%23.16e" ) << "\n\n";
}


// =======================================================================================
TEST( test_linalg_covariance, three ) {
  // -------------------------------------------------------------------------------------
  real8_t real_cov[3][3] = {
    {  3.6452722390985926e+01,  1.8708439101091920e+00, -1.8096437584389371e+01 },
    {  1.8708439101091920e+00,  8.8762775335900077e+00,  7.7372960848849504e-01 },
    { -1.8096437584389371e+01,  7.7372960848849504e-01,  1.0784050826753351e+01 }
  };
  real8_t real_cor[3][3] = {
    {  1.0e+00,                5.7819817104127359e-03, -4.6034263042895998e-02 },
    {  5.7819817104127359e-03, 1.0e+00,                 8.0830714459077316e-03 },
    { -4.6034263042895998e-02, 8.0830714459077316e-03,  1.0e+00                }
  };

  real8_t data[][3] = {
    {  8.0325960079033543e+00,  2.8707151837852845e+00, -2.5375411449502678e+00 },
    {  1.2889161038413006e+01,  7.0610094733565134e+00, -1.9885773923638450e+00 },
    { -7.0623208855681219e-01, -5.4154432467647867e-02,  1.9753950289389206e+00 },
    {  1.5841409383172442e+01, -7.4007954651491714e-01, -4.7373101477213506e+00 },
    {  4.7727344098766924e+00,  1.2971090583105649e+00,  1.8868860545388599e-01 },
    {  9.1540173083690011e+00,  4.0831644015119322e+00, -3.4272616143525600e+00 },
    {  1.0611159492425514e+01,  9.5392944279507965e+00, -3.2597038367764437e+00 },
    {  7.3854075848170391e+00,  3.7790281403394927e+00, -2.9579485583421437e+00 },
    {  5.8148740233502147e+00,  6.0450370766339534e-01, -1.3666286403534320e+00 },
    { -6.5302773426300655e+00, -6.8671773010325976e-01,  3.4909592626046724e+00 },
    {  1.0101618079092404e+01,  2.7581489289796584e+00, -3.8455492946121996e+00 },
    {  1.1283063146413262e+01,  5.1266212612638267e+00, -9.3992752213400343e-01 },
    {  7.9237711672514539e+00,  7.9799379235461725e+00, -1.6521759091989747e+00 },
    {  9.5762432252446281e+00,  1.6420966100240344e+00, -2.5755572295443678e+00 },
    {  1.1217948671904525e+01,  6.0683209991719957e+00, -4.7051681068661173e+00 },
    {  3.6151799380633705e+00,  5.6954991560084149e+00,  3.2267779854311662e+00 },
    {  1.1677134668809011e+01,  2.8099078186594841e+00, -2.3585663897528186e+00 },
    {  1.4847235278732244e+01,  8.6181982310636904e+00, -5.3398299670567564e+00 },
    { -2.8933498016940967e-01,  5.1912826286319946e+00,  3.9346171739269380e+00 },
    {  9.1714435739986016e+00,  4.2778078525826890e+00, -3.8815348749567309e+00 },
    {  1.2776575560993159e+01,  1.8170619932456158e+00, -6.2647543285748162e+00 },
    {  2.7678093081822763e+00,  3.0224020793685251e+00,  1.3006318995999271e+00 },
    {  3.4526002815691008e+00,  6.7325750379229747e+00,  3.1978850230226774e-01 },
    {  3.8220608905515716e+00,  6.9027539076672575e+00,  1.5154384640438299e+00 },
    {  1.4757364358651547e+01,  3.8378429039191286e+00, -4.1554782093123919e+00 },
    {  7.5596228055300125e+00,  3.4854555944197680e+00, -2.2019930939899330e+00 },
    { -4.7621255619947045e-01,  6.5765187176277671e+00,  4.3248264857692398e+00 },
    {  1.6221131643616161e+01,  2.7012974602158359e+00, -5.1073718798211587e+00 },
    {  3.5670327006047353e+00,  2.9270640159751289e+00, -1.0137129088272774e+00 },
    {  1.7938501621538297e+01,  1.4289326264218660e+00, -6.1277581261044896e+00 },
    {  8.4231643004251424e+00,  2.7737434816641167e+00, -2.1076354543769580e+00 },
    {  2.1062275239605160e+01,  3.8556803378530113e+00, -9.7480338139471812e+00 },
    {  6.5265992242671862e+00,  9.9054701134783123e+00,  9.5164058487190051e-01 },
    {  1.3720878269887930e+01,  7.0407897599221778e+00, -3.2028587802988353e+00 },
    { -3.2003472636128691e+00,  8.3524854127400361e-01,  3.4615812509034103e+00 },
    {  7.7286536898867295e+00,  1.8957746411328735e-01, -3.1852426202399503e-01 },
    {  3.9162050550362886e+00,  3.7736842461223139e+00,  4.9247766706333129e-02 },
    {  9.0686362075612319e+00, -3.9890157240665496e+00, -4.8946657428986917e+00 },
    {  1.0951640289998188e+01,  3.6024577657857306e+00, -4.4121442616768363e+00 },
    {  1.8188861883425741e+01,  3.2868989109554723e+00, -7.2110823619068221e+00 }
  };

  const int32_t ns = sizeof(data) / sizeof(data[0]);

  // -------------------------------------------------------------------------------------

  Table tab(ns,3);
  for ( int32_t i=0; i<ns; i++ ) {
    tab(i,0) =  data[i][0];
    tab(i,1) =  data[i][1];
    tab(i,2) =  data[i][2];
  }

  Matrix cov;
  Matrix cor;

  covariance( cov, tab );
  correlate(  cor, cov );

  for ( int32_t i=0; i<3; i++ ) {
    for ( int32_t j=0; j<3; j++ ) {
      EXPECT_DOUBLE_EQ( real_cov[i][j], cov.get(i,j) );
      EXPECT_DOUBLE_EQ( real_cor[i][j], cor.get(i,j) );
    }
  }

  //std::cout << "Cov = \n" << toString( cov, "%23.16e" ) << "\n"
  //          << "Cor = \n" << toString( cor, "%23.16e" ) << "\n\n";
}


// =======================================================================================
TEST( test_linalg_lapack, svd ) {
  // -------------------------------------------------------------------------------------
  real8_t adat[27][4] = {
    {  1.9213,  0.5387, -0.7173, -0.5689 },
    {  0.4554, -3.0178, -0.1386,  0.6874 },
    { -0.0623,  2.5475, -0.3163,  2.1501 },
    { -1.9158, -1.1538,  0.1397,  1.5510 },
    {  0.3871, -1.2282, -0.1223,  1.4032 },
    {  1.1424,  0.3972, -0.9084,  0.2841 },
    { -0.9353,  1.8361, -0.6937, -0.6700 },
    { -0.6721, -0.4498,  0.0923, -1.1815 },
    {  2.6808,  3.1826,  0.3083,  0.6102 },
    { -1.6097,  0.7311,  0.2109, -0.7608 },
    {  0.2219, -1.2596,  0.0740, -0.2086 },
    { -1.3527,  0.8490,  1.0842, -0.5712 },
    { -1.9933,  1.3895, -1.1642,  0.7516 },
    {  0.7529, -0.2246,  1.7770,  0.2728 },
    {  0.7035, -0.5040,  1.0154, -0.7722 },
    { -0.4354, -0.8419, -0.7005,  0.2381 },
    { -0.7933,  0.0960,  0.6101,  1.9219 },
    {  0.0979, -0.0090,  1.0438,  1.8537 },
    {  2.0311,  0.5429, -0.0607, -0.5843 },
    {  0.4431, -2.7351, -0.3116,  0.0204 },
    {  0.7321,  0.1481, -0.1631, -0.7392 },
    { -1.6633,  0.6157,  0.0820,  0.0645 },
    {  0.2733, -0.5583, -0.1805, -0.3479 },
    {  1.4280, -0.5184, -0.9222, -0.3169 },
    {  0.7377, -0.8704,  0.4034, -1.1093 },
    {  0.0948, -0.1288, -1.8407, -0.8055 },
    {  0.0607, -0.1947,  2.2844,  0.0777 }  };

  real8_t sdat[4] = {  6.9475380276236516e+00,  6.2949263451473687e+00,
                       4.9438560812116616e+00,  4.3397439961545370e+00 };

  real8_t vdat[4][4] = {
    { -2.0239247375646714e-02, -9.9428631600420847e-01,
      4.5982509242134456e-02, -9.4184412278488727e-02 },
    { -9.5264564266472762e-01, -5.6876997757993042e-03,
      6.5717434369786110e-02,  2.9684195862954127e-01 },
    { -2.8458218154594611e-01,  5.6285685451899159e-02,
      -5.3435122412722691e-01, -7.9392296404216356e-01 },
    {  1.0521232971532631e-01, -9.0522336974087347e-02,
       -8.4144851116237906e-01,  5.2220731060302006e-01 }
  };
  
  real8_t vdat_t[4][4] = {
    { -2.0239247375646714e-02, -9.5264564266472762e-01,
      -2.8458218154594611e-01,  1.0521232971532631e-01 },
    { -9.9428631600420847e-01, -5.6876997757993042e-03,
      5.6285685451899159e-02, -9.0522336974087347e-02 },
    {  4.5982509242134456e-02,  6.5717434369786110e-02,
       -5.3435122412722691e-01, -8.4144851116237906e-01 },
    { -9.4184412278488727e-02,  2.9684195862954127e-01,
      -7.9392296404216356e-01,  5.2220731060302006e-01 }
  };

  // -------------------------------------------------------------------------------------

  const int32_t NV = sizeof(adat[0]) / sizeof(adat[0][0]);
  const int32_t NS = sizeof(adat) / NV / sizeof(adat[0][0]);

  real8_t* inputA = new real8_t[NS*NV];
  
  toColumn( inputA, adat,   NS, NV );

  const char* JOBU  = "None";
  const char* JOBVT = "All";

  int32_t INFO      = 0;
  int32_t LWORK     = -1;
  real8_t WRKP[2]   = {0.0, 0.0};
  real8_t S[NV];
  real8_t U[2];
  real8_t VT[NV*NV];
  int32_t ONE       = 1;

  /* ----- query work space requirments -------------------- */
  dgesvd_( JOBU, JOBVT, &NS, &NV, inputA, &NS, S, U, &ONE, VT, &NV, WRKP, &LWORK, &INFO );
  EXPECT_EQ( 0, INFO );

  LWORK = static_cast<int32_t>(WRKP[0]);
  
  real8_t WORK[LWORK];
  INFO = 0;

  /* ----- call SVD for eigen systems ---------------------- */
  dgesvd_( JOBU, JOBVT, &NS, &NV, inputA, &NS, S, U, &ONE, VT, &NV, WORK, &LWORK, &INFO );
  EXPECT_EQ( 0, INFO );

  for ( int32_t i=0; i<NV; i++ ) {
    EXPECT_DOUBLE_EQ( sdat[i], S[i] );
  }

  //std::cout << "VT=\n"      << toStringColumnMajor( VT, NV, NV, "%7.4f" ) << "\n\n";
  
  //std::cout << "vdat=\n"    << toStringRowMajor( (real8_t*)vdat, NV, NV, "%7.4f" ) << "\n\n";
  
  //std::cout << "vdat**T=\n" << toStringRowMajor( (real8_t*)vdat_t, NV, NV, "%7.4f" ) << "\n\n";
  
  delete[] inputA;
}


// =======================================================================================
TEST( test_linalg_lapack, sdd ) {
  // -------------------------------------------------------------------------------------
  real8_t adat[27][4] = {
    {  1.9213,  0.5387, -0.7173, -0.5689 },
    {  0.4554, -3.0178, -0.1386,  0.6874 },
    { -0.0623,  2.5475, -0.3163,  2.1501 },
    { -1.9158, -1.1538,  0.1397,  1.5510 },
    {  0.3871, -1.2282, -0.1223,  1.4032 },
    {  1.1424,  0.3972, -0.9084,  0.2841 },
    { -0.9353,  1.8361, -0.6937, -0.6700 },
    { -0.6721, -0.4498,  0.0923, -1.1815 },
    {  2.6808,  3.1826,  0.3083,  0.6102 },
    { -1.6097,  0.7311,  0.2109, -0.7608 },
    {  0.2219, -1.2596,  0.0740, -0.2086 },
    { -1.3527,  0.8490,  1.0842, -0.5712 },
    { -1.9933,  1.3895, -1.1642,  0.7516 },
    {  0.7529, -0.2246,  1.7770,  0.2728 },
    {  0.7035, -0.5040,  1.0154, -0.7722 },
    { -0.4354, -0.8419, -0.7005,  0.2381 },
    { -0.7933,  0.0960,  0.6101,  1.9219 },
    {  0.0979, -0.0090,  1.0438,  1.8537 },
    {  2.0311,  0.5429, -0.0607, -0.5843 },
    {  0.4431, -2.7351, -0.3116,  0.0204 },
    {  0.7321,  0.1481, -0.1631, -0.7392 },
    { -1.6633,  0.6157,  0.0820,  0.0645 },
    {  0.2733, -0.5583, -0.1805, -0.3479 },
    {  1.4280, -0.5184, -0.9222, -0.3169 },
    {  0.7377, -0.8704,  0.4034, -1.1093 },
    {  0.0948, -0.1288, -1.8407, -0.8055 },
    {  0.0607, -0.1947,  2.2844,  0.0777 }  };

  real8_t sdat[4] = {  6.9475380276236516e+00,  6.2949263451473687e+00,
                       4.9438560812116616e+00,  4.3397439961545370e+00 };

  real8_t vdat[4][4] = {
    { -2.0239247375646714e-02, -9.9428631600420847e-01,
      4.5982509242134456e-02, -9.4184412278488727e-02 },
    { -9.5264564266472762e-01, -5.6876997757993042e-03,
      6.5717434369786110e-02,  2.9684195862954127e-01 },
    { -2.8458218154594611e-01,  5.6285685451899159e-02,
      -5.3435122412722691e-01, -7.9392296404216356e-01 },
    {  1.0521232971532631e-01, -9.0522336974087347e-02,
       -8.4144851116237906e-01,  5.2220731060302006e-01 }
  };
  
  // -------------------------------------------------------------------------------------

  const int32_t NV = sizeof(adat[0]) / sizeof(adat[0][0]);
  const int32_t NS = sizeof(adat) / NV / sizeof(adat[0][0]);

  real8_t* inputA = new real8_t[NS*NV];
  
  toColumn( inputA, adat,   NS, NV );

  const char* JOBZ = "Overwrite";

  int32_t INFO      = 0;
  int32_t LWORK     = -1;
  int32_t IWORK[8*NV];
  real8_t WRKP[2]   = {0.0, 0.0};
  real8_t S[NV];
  real8_t U[2];
  real8_t VT[NV*NV];
  int32_t ONE       = 1;

  /* ----- query work space requirments -------------------- */
  dgesdd_( JOBZ, &NS, &NV, inputA, &NS, S, U, &ONE, VT, &NV, WRKP, &LWORK, IWORK, &INFO );
  EXPECT_EQ( 0, INFO );

  LWORK = static_cast<int32_t>(WRKP[0]);
  
  real8_t WORK[LWORK];
  INFO = 0;

  /* ----- call SVD for eigen systems ---------------------- */
  dgesdd_( JOBZ, &NS, &NV, inputA, &NS, S, U, &ONE, VT, &NV, WORK, &LWORK, IWORK, &INFO );
  EXPECT_EQ( 0, INFO );

  for ( int32_t i=0; i<NV; i++ ) {
    EXPECT_DOUBLE_EQ( sdat[i], S[i] );
  }

  //std::cout << "buffer=\n" << toString( VT, NV*NV, "%7.4f" ) << "\n\n";
  
  //std::cout << "vdat=\n"    << toStringRowMajor( (real8_t*)vdat, NV, NV, "%7.4f" ) << "\n\n";
  
  //std::cout << "VT=\n"      << toStringColumnMajor( VT, NV, NV, "%7.4f" ) << "\n\n";
  
  //std::cout << "A=\n"      << toStringColumnMajor( inputA, NS, NV, "%7.4f" ) << "\n\n";
  
  delete[] inputA;
}


// =======================================================================================
TEST( test_linalg_table, rotate ) {
  // -------------------------------------------------------------------------------------
  Dice* dd = Dice::getInstance();
  dd->seed_set( reinterpret_cast<void*>(SEED_MATTER), dd->seed_size() );

  const real8_t SIG_X = D_THREE;
  const real8_t SIG_Y = D_TWO;
  const real8_t SIG_Z = D_ONE;

  const real8_t VAR_X = SIG_X * SIG_X;
  const real8_t VAR_Y = SIG_Y * SIG_Y;
  const real8_t VAR_Z = SIG_Z * SIG_Z;

  const real8_t MU_X  = 15.0;
  const real8_t MU_Y  = -5.0;
  const real8_t MU_Z  = 10.0;
  
  const real8_t mudat[] = { MU_X, MU_Y, MU_Z };
  
  const real8_t ANG_X = 45.0 * D_PI_180;
  const real8_t ANG_Y = 30.0 * D_PI_180;
  const real8_t ANG_Z = 60.0 * D_PI_180;
 
  const int32_t NS    = 30000;

  Vector muvec( 3 );
  muvec.set( 0, mudat[0] );
  muvec.set( 1, mudat[1] );
  muvec.set( 2, mudat[2] );
  
  Matrix Rx = Matrix::ROT1( ANG_X );
  Matrix Ry = Matrix::ROT2( ANG_Y );
  Matrix Rz = Matrix::ROT3( ANG_Z );
  
  Matrix Rtmp(3), R(3);

  Rtmp.dot( Ry, Rx );
  R.dot( Rz, Rtmp );

  //std::cout << "Mu  =\n" << toString( muvec, "%12.8f" ) << "\n";
  //std::cout << "Rot =\n" << toString( R, "%12.8f" ) << "\n";

  // -------------------------------------------------------------------------------------

  Table original  ( NS, 3 );
  Table rotated   ( NS, 3 );
  Table shifted   ( NS, 3 );
  Table reduced   ( NS, 3 );
  Table recovered ( NS, 3 );
  
  for ( int32_t i=0; i<NS; i++ ) {
    original(i,0) = SIG_X * dd->normal();
    original(i,1) = SIG_Y * dd->normal();
    original(i,2) = SIG_Z * dd->normal();
  }

  original(NS-3,0) = D_ONE;   original(NS-3,1) = D_ZERO;  original(NS-3,2) = D_ZERO;
  original(NS-2,0) = D_ZERO;  original(NS-2,1) = D_ONE;   original(NS-2,2) = D_ZERO;
  original(NS-1,0) = D_ZERO;  original(NS-1,1) = D_ZERO;  original(NS-1,2) = D_ONE;

  //MARK;
  //original.write_ascii( std::cout, NS-6, NS-1, "%10.6f" );

  rotateWithRows( rotated, original, R );

  //MARK;
  //rotated.write_ascii( std::cout, NS-6, NS-1, "%10.6f" );

  for ( int32_t i=0; i<NS; i++ ) {
    shifted(i,0) = rotated(i,0) + MU_X;
    shifted(i,1) = rotated(i,1) + MU_Y;
    shifted(i,2) = rotated(i,2) + MU_Z;
  }

  // MARK;
  //shifted.write_ascii( std::cout, NS-6, NS-1, "%10.6f" );

  PCA pca;

  pca.fromSamples( shifted );

  //pca.report( std::cout, "%12.8f" );

  Matrix cov;
  ::covariance( cov, shifted );

  //std::cout << "Cov =\n" << toString( cov, "%12.8f" ) << "\n";

  //EigenSystem* ES = EigenSystem::symetric( cov );

  //ES->compute();

  //ES->sort();

  //ES->display( std::cout, "%12.8f" );

  //PCA pca2;
  //pca2.fromCovariance( cov, muvec );
  //pca2.report( std::cout, "%12.8f" );
  
  pca.transform( reduced, shifted );

  //MARK;
  //reduced.write_ascii( std::cout, NS-6, NS-1, "%10.6f" );

  pca.recover( recovered, reduced );

  //MARK;
  //recovered.write_ascii( std::cout, NS-6, NS-1, "%10.6f" );


  real8_t MSE = D_ZERO;
  for ( int32_t i=0; i<NS; i++ ) {
    for ( int32_t j=0; j<3; j++ ) {
      const real8_t d = shifted.get(i,j) - recovered.get(i,j);
      MSE += (d*d);
    }
  }

  //std::cout << "MSE = " << MSE << "\n\n";

  EXPECT_NEAR( D_ZERO, MSE, 1.0e-20 );
}


} // end namespace


// =======================================================================================
// **                              U T E S T _ L I N A L G                              **
// ======================================================================== END FILE =====
