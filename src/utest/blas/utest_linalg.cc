// ====================================================================== BEGIN FILE =====
// **                              U T E S T _ L I N A L G                              **
// =======================================================================================
// **                                                                                   **
// **  This file is part of the TRNCMP Research Library, `Callisto' (formerly SolLib.)  **
// **                                                                                   **
// **  Copyright (c) 2019-, Stephen W. Soliday                                          **
// **                       stephen.soliday@trncmp.org                                  **
// **                       http://research.trncmp.org                                  **
// **                                                                                   **
// **  -------------------------------------------------------------------------------  **
// **                                                                                   **
// **  Callisto is free software: you can redistribute it and/or modify it under the    **
// **  terms of the GNU General Public License as published by the Free Software        **
// **  Foundation, either version 3 of the License, or (at your option)                 **
// **  any later version.                                                               **
// **                                                                                   **
// **  Callisto is distributed in the hope that it will be useful, but WITHOUT          **
// **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS    **
// **  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.   **
// **                                                                                   **
// **  You should have received a copy of the GNU General Public License along with     **
// **  Callisto. If not, see <https://www.gnu.org/licenses/>.                           **
// **                                                                                   **
// ----- Modification History ------------------------------------------------------------
//
/** @brief  Automated testing for Vector class methods.
 *  @file   utest_linalg.cc
 *  @author Stephen W. Soliday
 *  @date   2019-Jul-23
 *
 *  Provides automated testing for the LinAlg methods.
 */
// =======================================================================================


#include <limits.h>
#include <LinAlg.hh>
#include <gtest/gtest.h>
#include <array_print.hh>

namespace {


#define checkAV( _v, _b, _n ) {                  \
    for ( int32_t _i=0; _i<(int32_t)_n; _i++ ) { \
      EXPECT_DOUBLE_EQ( _v[_i], _b(_i) );        \
    }                                            \
  }


#define checkAVe( _v, _b, _n, _e ) {             \
    for ( int32_t _i=0; _i<(int32_t)_n; _i++ ) { \
      EXPECT_NEAR( _v[_i], _b(_i), _e );         \
    }                                            \
  }


#define checkAM( v, b, nr, nc ) {		 \
    int32_t idx = 0;				 \
    for ( int32_t r=0; r<(int32_t)nr; r++ ) {	 \
      for ( int32_t c=0; c<(int32_t)nc; c++ ) {  \
	EXPECT_DOUBLE_EQ( v[idx], b(r,c) );	 \
	idx++;					 \
      }						 \
    }						 \
  }


#define checkAMe( v, b, nr, nc, ep ) {		 \
    int32_t idx = 0;				 \
    for ( int32_t r=0; r<(int32_t)nr; r++ ) {	 \
      for ( int32_t c=0; c<(int32_t)nc; c++ ) {  \
	EXPECT_NEAR( v[idx], b(r,c), ep );       \
	idx++;					 \
      }						 \
    }						 \
  }


// =======================================================================================
TEST(test_linalg_slice, get_row) {
  // -------------------------------------------------------------------------------------
  real8_t adat[] = { 1.1, 1.2, 1.3, 1.4,
                     2.1, 2.2, 2.3, 2.4,
                     3.1, 3.2, 3.3, 3.4 };
  
  real8_t r0[] = { 1.1, 1.2, 1.3, 1.4 };
  real8_t r1[] = { 2.1, 2.2, 2.3, 2.4 };
  real8_t r2[] = { 3.1, 3.2, 3.3, 3.4 };
  
  Matrix M = Matrix::row_major(3,4,adat);
  Vector V0;
  Vector V1;
  Vector V2;

  getRow( V0, M, 0 );
  getRow( V1, M, 1 );
  getRow( V2, M, 2 );

  checkAV( r0, V0, 4 );
  checkAV( r1, V1, 4 );
  checkAV( r2, V2, 4 );
}


  // =======================================================================================
  TEST(test_linalg_slice, set_row) {
    // -------------------------------------------------------------------------------------
    real8_t test[] = { 1.1, 1.2, 1.3, 1.4,
		       2.1, 2.2, 2.3, 2.4,
		       3.1, 3.2, 3.3, 3.4 };
  
    real8_t r0[] = { 1.1, 1.2, 1.3, 1.4 };
    real8_t r1[] = { 2.1, 2.2, 2.3, 2.4 };
    real8_t r2[] = { 3.1, 3.2, 3.3, 3.4 };
  
    Matrix M(3,4);
    Vector V0( 4, r0 );
    Vector V1( 4, r1 );
    Vector V2( 4, r2 );

    M.set(9.9);

    setRow( M, V0, 0 );
    setRow( M, V1, 1 );
    setRow( M, V2, 2 );

    checkAM( test, M, 3, 4 );
  }


  // =======================================================================================
  TEST(test_linalg_slice, get_column) {
    // -------------------------------------------------------------------------------------
    real8_t adat[] = { 1.1, 1.2, 1.3,
		       2.1, 2.2, 2.3,
		       3.1, 3.2, 3.3,
		       4.1, 4.2, 4.3 };
  
    real8_t c0[] = { 1.1, 2.1, 3.1, 4.1 };
    real8_t c1[] = { 1.2, 2.2, 3.2, 4.2 };
    real8_t c2[] = { 1.3, 2.3, 3.3, 4.3 };
  
    Matrix M = Matrix::row_major(4,3,adat);
    Vector V0;
    Vector V1;
    Vector V2;

    getCol( V0, M, 0 );
    getCol( V1, M, 1 );
    getCol( V2, M, 2 );

    checkAV( c0, V0, 4 );
    checkAV( c1, V1, 4 );
    checkAV( c2, V2, 4 );
  }


  // =======================================================================================
  TEST(test_linalg_slice, set_column) {
    // -------------------------------------------------------------------------------------
    real8_t test[] = { 1.1, 1.2, 1.3, 1.4,
		       2.1, 2.2, 2.3, 2.4,
		       3.1, 3.2, 3.3, 3.4 };
  
    real8_t r0[] = { 1.1, 2.1, 3.1 };
    real8_t r1[] = { 1.2, 2.2, 3.2 };
    real8_t r2[] = { 1.3, 2.3, 3.3 };
    real8_t r3[] = { 1.4, 2.4, 3.4 };
  
    Matrix M(3,4);
    Vector V0( 4, r0 );
    Vector V1( 4, r1 );
    Vector V2( 4, r2 );
    Vector V3( 4, r3 );

    M.set(9.9);

    setCol( M, V0, 0 );
    setCol( M, V1, 1 );
    setCol( M, V2, 2 );
    setCol( M, V3, 3 );

    checkAM( test, M, 3, 4 );
  }

  // =======================================================================================
  TEST(test_linalg_slice, get_diagonal) {
    // -------------------------------------------------------------------------------------
    real8_t adat[] = { 1.1, 1.2, 1.3,
		       2.1, 2.2, 2.3,
		       3.1, 3.2, 3.3,
		       4.1, 4.2, 4.3 };

    real8_t d[] = { 1.1, 2.2, 3.3 };

    Matrix M = Matrix::row_major(4,3,adat);

    Vector V;

    getDiag( V, M );
 
    checkAV( d, V, 3 );
  }


  // =======================================================================================
  TEST(test_linalg_slice, set_diagonal) {
    // -------------------------------------------------------------------------------------
    real8_t test[] = { 1.1, 9.9, 9.9,
		       9.9, 2.2, 9.9,
		       9.9, 9.9, 3.3 };
  
    real8_t d[] = { 1.1, 2.2, 3.3 };
  
    Matrix M(3);
    Vector V( 3, d );

    M.set(9.9);

    setDiag( M, V );

    checkAM( test, M, 3, 3 );
  }


  // =======================================================================================
  TEST(test_linalg_dot, v_dot_M) {
    // -------------------------------------------------------------------------------------
    real8_t vdat[] = { 2.26, 1.28, 1.91, 1.08, 1.52 };

    real8_t mdat[] = { 7.02, -2.75, 8.77, 7.77, 7.86, -5.47, 3.71,
		       -7.55, 3.50, 3.19, 7.96, 8.10, 8.48, -9.49,
		       -6.30, 9.57, -1.26, -5.23, 3.32, -5.75, 6.77,
		       1.88, 5.19, 8.06, -8.92, -3.46, 1.59, 5.18,
		       7.78, -6.71, -8.28, 2.33, -9.24, 6.51, -0.35 };

    real8_t adat[] = { 8.0242, 11.9497, 17.6160, 11.6677, 16.6912, -0.8779, 14.2305 };


    Vector  V(5,vdat);
    Matrix  M = Matrix::row_major(5,7,mdat);
    Vector  A;

    dot( A, V, M );

    EXPECT_EQ( 7, A.size() );
    checkAVe( adat, A, 7, 10.e-14 );
  }


  // =======================================================================================
  TEST(test_linalg_dot, M_dot_v) {
    // -------------------------------------------------------------------------------------
    real8_t vdat[] = { 1.11, 4.25, -9.06, 6.71 };

    real8_t mdat[] = { -1.97, -1.75, 7.06, -1.54,
		       1.13, 7.76, -5.99, 6.25,
		       -0.35, 8.76, 3.49, -3.42,
		       -5.18, 0.63, -8.14, -0.83,
		       -0.80, -9.15, -5.47, -7.88 };

    real8_t adat[] = { -83.9212, 130.4412, -17.7261, 65.1068, -43.0921 };


    Matrix  M = Matrix::row_major(5,4,mdat);
    Vector  V(4,vdat);
    Vector  A;

    dot( A, M, V );

    checkAVe( adat, A, 5, 1.0e-14 );
  }


  // =======================================================================================
  TEST(test_linalg_dot, v_dot_M_pb) {
    // -------------------------------------------------------------------------------------
    real8_t vdat[] = { 2.88, 0.26, 4.82, 1.23 };

    real8_t mdat[] = { -8.22, 7.38, -7.51, -4.06, -4.81, 4.37, 6.24, 1.12,
		       2.30, 8.72, -7.40, 7.88, -6.50, 7.10, -1.30, -6.57,
		       -2.83, -4.86, 5.96, 6.82, 7.04, 2.73, 3.78, 8.92,
		       1.84, 9.38, -8.82, 3.40, -1.87, -2.97, 3.06, -8.86 };

    real8_t adat[] = { -31.7230, 11.3638, -7.6142, 30.6504, 15.5699, 17.7771, 41.6366, 32.5640 };

    real8_t bdat[] = { 2.73, -0.27, -1.94, 3.24, -0.52, -6.16, 2.02, -1.05 };


    Vector  V(4,vdat);
    Vector  B(8,bdat);
    Matrix  M = Matrix::row_major(4,8,mdat);
    Vector  A;

    dotAdd( A, V, M, B );

    checkAVe( adat, A, 8, 1.0e-14 );
  }


  // =======================================================================================
  TEST(test_linalg_dot, M_dot_v_pb) {
    // -------------------------------------------------------------------------------------
    real8_t vdat[] = { -7.38, 1.13, -0.33, 3.65 };

    real8_t mdat[] = { -6.78, 2.92, -8.06, 1.43, -1.40, 4.67, 9.05, -9.90,
		       6.57, -8.46, 1.32, -7.43, -1.74, -0.07, 5.95, 1.04,
		       8.25, -6.58, -2.49, 2.20, -8.84, 7.14, 0.22, -0.80,
		       2.69, -6.45, -3.82, 7.16, -8.48, -5.31, 2.87, 1.89 };

    real8_t adat[] = { 62.6465, -54.1805, 48.0931, 15.3287, -26.6390, -59.5514, -57.2626, 88.3297 };

    real8_t bdat[] = { -1.91, -1.70, 0.24, 8.87, -6.97, -3.27, -7.60, 6.93 };


    Vector  V(4,vdat);
    Vector  B(8,bdat);
    Matrix  M = Matrix::row_major(4,8,mdat);
    Vector  A;

    dotAdd( A, V, M, B );

    checkAVe( adat, A, 8, 1.0e-13 );
  }


  // =======================================================================================
  TEST(test_linalg_mul, outer) {
    // -------------------------------------------------------------------------------------
    real8_t cdat[] = { 0.65, 6.48, 0.40, -8.14 };

    real8_t rdat[] = { -7.48, -1.18, 7.81, -1.44, 0.25, 7.69, 2.97, -2.99 };

    real8_t adat[] = { -4.8620, -0.7670, 5.0765, -0.9360, 0.1625, 4.9985, 1.9305, -1.9435,
		       -48.4704, -7.6464, 50.6088, -9.3312, 1.6200, 49.8312, 19.2456, -19.3752,
		       -2.9920, -0.4720, 3.1240, -0.5760, 0.1000, 3.0760, 1.1880, -1.1960,
		       60.8872, 9.6052, -63.5734, 11.7216, -2.0350, -62.5966, -24.1758, 24.3386 };

    Vector  C(4,cdat);
    Vector  R(8,rdat);
    Matrix  A;

    outer( A, C, R );

    checkAMe( adat, A, 4, 8, 1.0e-14 );
  }

  // =======================================================================================
  TEST(test_linalg_mul, aMa) {
    // -------------------------------------------------------------------------------------
    real8_t vdat[] = { -9.24, 3.45, 2.82, 8.51, -2.21 };

    real8_t mdat[] = { -0.22, -0.49, 6.15, 1.40, -1.82,
                   -4.94, -8.25, 9.83, -5.22, -2.61,
                   4.85, -3.70, 0.39, 7.03, 1.03,
                   -5.52, 8.51, 9.43, -0.59, -9.38,
                   7.07, 7.48, -4.73, -3.84, 0.06 };

    real8_t test =  9.47132838e+02;

   Vector  V(5,vdat);
   Matrix  M = Matrix::row_major(5,5,mdat);

    real8_t s = vMv( V, M );

    EXPECT_NEAR( test, s, 1.0e-32 );
  }

  // =======================================================================================
  TEST(test_linalg_mul, rMc) {
    // -------------------------------------------------------------------------------------
    real8_t rdat[] = { 3.91, 7.06, 6.67, -4.66, -5.49 };

    real8_t cdat[] = { 8.42, -4.21, -5.48, -3.56, 5.47 };

    real8_t mdat[] = { -3.76, -0.08, 0.25, -4.75, 3.16,
                   2.02, 5.50, 4.03, 0.82, 9.82,
                   -4.42, 0.28, 2.89, 3.51, 6.29,
                   3.80, 8.19, -1.63, -4.80, 1.41,
                   -5.03, -6.11, -6.81, -9.14, -2.99 };

    real8_t test = -3.98450227e+02;

   Vector  R(5,rdat);
   Vector  C(5,cdat);
   Matrix  M = Matrix::row_major(5,5,mdat);

    real8_t s = vMv( R, M, C );

    EXPECT_NEAR( test, s, 1.0e-13 );
  }

  // =======================================================================================
  TEST(test_linalg_mul, vmMvm) {
    // -------------------------------------------------------------------------------------
    real8_t vdat[] = { -7.94, 1.84, 7.16, -3.66, 8.42, 6.77, 2.58 };

    real8_t mdat[] = { 6.02, -7.36, -4.55, 5.55, 0.23, -7.58, -7.46 };

    real8_t sdat[] = { 7.49, 3.08, -9.94, -7.18, -9.03, -3.80, -4.21,
                   7.26, -1.55, 1.85, 0.62, 6.56, 1.66, -3.57,
                   -0.18, -3.83, -6.96, 1.15, 8.02, 1.98, -6.74,
                   4.91, -1.61, -9.38, -2.86, 6.53, -5.81, -8.69,
                   -0.47, 0.82, 6.41, 6.93, 3.03, -7.79, -7.10,
                   7.98, -4.15, 8.40, -4.01, 7.47, -0.37, -5.95,
                   -2.39, 9.26, -1.00, 0.62, -5.35, -6.31, 0.47 };

    real8_t test =  3.44458873e+03;

   Vector  V(7,vdat);
   Vector  mu(7,mdat);
   Matrix  S = Matrix::row_major(7,7,sdat);

    real8_t s = vMv( V, mu, S );

    EXPECT_NEAR( test, s, 1.0e-11 );
  }

} // end namespace


// =======================================================================================
// **                              U T E S T _ L I N A L G                              **
// ======================================================================== END FILE =====
