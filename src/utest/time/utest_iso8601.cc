// ====================================================================== BEGIN FILE =====
// **                             U T E S T _ I S O 8 6 0 1                             **
// =======================================================================================
// **                                                                                   **
// **  This file is part of the TRNCMP Research Library, `Callisto' (formerly SolLib.)  **
// **                                                                                   **
// **  Copyright (c) 2019-, Stephen W. Soliday                                          **
// **                       stephen.soliday@trncmp.org                                  **
// **                       http://research.trncmp.org                                  **
// **                                                                                   **
// **  -------------------------------------------------------------------------------  **
// **                                                                                   **
// **  Callisto is free software: you can redistribute it and/or modify it under the    **
// **  terms of the GNU General Public License as published by the Free Software        **
// **  Foundation, eithger version 3 of the License, or (at your option)                **
// **  any later version.                                                               **
// **                                                                                   **
// **  Callisto is distributed in the hope that it will be useful, but WITHOUT          **
// **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS    **
// **  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.   **
// **                                                                                   **
// **  You should have received a copy of the GNU General Public License along with     **
// **  Callisto. If not, see <https://www.gnu.org/licenses/>.                           **
// **                                                                                   **
// ----- Modification History ------------------------------------------------------------
//
/** @brief  Automated testing for ISO 8601 parsing.
 *  @file   utest_iso8601.cc
 *  @author Stephen W. Soliday
 *  @date   2019-Jul-29
 *
 *  Provides automated testing for ISO 8601 parsing.
 */
// =======================================================================================

#include <limits.h>
#include <gtest/gtest.h>
#include <ISO8601.hh>

namespace {

  
typedef struct _time_test {
  std::string  text;
  std::string  basic;
  std::string  extend;
  int32_t      hour;
  int32_t      minute;
  real8_t      second;
  int32_t      off_hour;
  int32_t      off_minute;
} time_test;

typedef struct _date_test {
  std::string  text;
  std::string  basic;
  std::string  extend;
  int32_t      year;
  int32_t      month;
  int32_t      day;
} date_test;


typedef struct _datetime_test {
  std::string  text;
  std::string  basic;
  std::string  extend;
  int32_t      year;
  int32_t      month;
  int32_t      day;
  int32_t      hour;
  int32_t      minute;
  real8_t      second;
  int32_t      off_hour;
  int32_t      off_minute;
} datetime_test;


// =======================================================================================
TEST( test_ISO8601, time ) {
  // -------------------------------------------------------------------------------------

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Winline"

  time_test dat[] = {
    { "T12:30:45",             "T123045Z",              "T12:30:45Z",            12, 30, 45.0,       0,  0 },
    { "T12:30:45.12345",       "T123045.12345Z",        "T12:30:45.12345Z",      12, 30, 45.12345,   0,  0 },
    { "T12:30:45Z",            "T123045Z",              "T12:30:45Z",            12, 30, 45.0,       0,  0 },
    { "T12:30:45.12345Z",      "T123045.12345Z",        "T12:30:45.12345Z",      12, 30, 45.12345,   0,  0 },
    { "T12:30:45+11:23",       "T123045+1123",          "T12:30:45+11:23",       12, 30, 45.0,      11, 23 },
    { "T12:30:45.12345+11:23", "T123045.12345+1123",    "T12:30:45.12345+11:23", 12, 30, 45.12345,  11, 23 },
    { "T12:30:45-20:11",       "T123045-2011",          "T12:30:45-20:11",       12, 30, 45.0,     -20, 11 },
    { "T12:30:45.12345-20:11", "T123045.12345-2011",    "T12:30:45.12345-20:11", 12, 30, 45.12345, -20, 11 },
    { "T123045",               "T123045Z",              "T12:30:45Z",            12, 30, 45.0,       0,  0 },
    { "T123045.12345",         "T123045.12345Z",        "T12:30:45.12345Z",      12, 30, 45.12345,   0,  0 },
    { "T123045Z",              "T123045Z",              "T12:30:45Z",            12, 30, 45.0,       0,  0 },
    { "T123045.12345Z",        "T123045.12345Z",        "T12:30:45.12345Z",      12, 30, 45.12345,   0,  0 },
    { "T123045+1123",          "T123045+1123",          "T12:30:45+11:23",       12, 30, 45.0,      11, 23 },
    { "T123045.12345+1123",    "T123045.12345+1123",    "T12:30:45.12345+11:23", 12, 30, 45.12345,  11, 23 },
    { "T123045-2011",          "T123045-2011",          "T12:30:45-20:11",       12, 30, 45.0,     -20, 11 },
    { "T123045.12345-2011",    "T123045.12345-2011",    "T12:30:45.12345-20:11", 12, 30, 45.12345, -20, 11 },                                                                       
    { "12:30:45",              "T123045Z",              "T12:30:45Z",            12, 30, 45.0,       0,  0 },
    { "12:30:45.12345",        "T123045.12345Z",        "T12:30:45.12345Z",      12, 30, 45.12345,   0,  0 },
    { "12:30:45Z",             "T123045Z",              "T12:30:45Z",            12, 30, 45.0,       0,  0 },
    { "12:30:45.12345Z",       "T123045.12345Z",        "T12:30:45.12345Z",      12, 30, 45.12345,   0,  0 },
    { "12:30:45+11:23",        "T123045+1123",          "T12:30:45+11:23",       12, 30, 45.0,      11, 23 },
    { "12:30:45.12345+11:23",  "T123045.12345+1123",    "T12:30:45.12345+11:23", 12, 30, 45.12345,  11, 23 },
    { "12:30:45-20:11",        "T123045-2011",          "T12:30:45-20:11",       12, 30, 45.0,     -20, 11 },
    { "12:30:45.12345-20:11",  "T123045.12345-2011",    "T12:30:45.12345-20:11", 12, 30, 45.12345, -20, 11 },
    { "123045",                "T123045Z",              "T12:30:45Z",            12, 30, 45.0,       0,  0 },
    { "123045.12345",          "T123045.12345Z",        "T12:30:45.12345Z",      12, 30, 45.12345,   0,  0 },
    { "123045Z",               "T123045Z",              "T12:30:45Z",            12, 30, 45.0,       0,  0 },
    { "123045.12345Z",         "T123045.12345Z",        "T12:30:45.12345Z",      12, 30, 45.12345,   0,  0 },
    { "123045+1123",           "T123045+1123",          "T12:30:45+11:23",       12, 30, 45.0,      11, 23 },
    { "123045.12345+1123",     "T123045.12345+1123",    "T12:30:45.12345+11:23", 12, 30, 45.12345,  11, 23 },
    { "123045-2011",           "T123045-2011",          "T12:30:45-20:11",       12, 30, 45.0,     -20, 11 },
    { "123045.12345-2011",     "T123045.12345-2011",    "T12:30:45.12345-20:11", 12, 30, 45.12345, -20, 11 },
    { "T12:30",                "T123000Z",              "T12:30:00Z",            12, 30,  0,         0,  0 },
    { "T12:30",                "T123000Z",              "T12:30:00Z",            12, 30,  0,         0,  0 },
    { "T12:30Z",               "T123000Z",              "T12:30:00Z",            12, 30,  0,         0,  0 },
    { "T12:30Z",               "T123000Z",              "T12:30:00Z",            12, 30,  0,         0,  0 },
    { "T12:30+11:23",          "T123000+1123",          "T12:30:00+11:23",       12, 30,  0,        11, 23 },
    { "T12:30+11:23",          "T123000+1123",          "T12:30:00+11:23",       12, 30,  0,        11, 23 },
    { "T12:30-20:11",          "T123000-2011",          "T12:30:00-20:11",       12, 30,  0,       -20, 11 },
    { "T12:30-20:11",          "T123000-2011",          "T12:30:00-20:11",       12, 30,  0,       -20, 11 },
    { "T1230",                 "T123000Z",              "T12:30:00Z",            12, 30,  0,         0,  0 },
    { "T1230",                 "T123000Z",              "T12:30:00Z",            12, 30,  0,         0,  0 },
    { "T1230Z",                "T123000Z",              "T12:30:00Z",            12, 30,  0,         0,  0 },
    { "T1230Z",                "T123000Z",              "T12:30:00Z",            12, 30,  0,         0,  0 },
    { "T1230+1123",            "T123000+1123",          "T12:30:00+11:23",       12, 30,  0,        11, 23 },
    { "T1230+1123",            "T123000+1123",          "T12:30:00+11:23",       12, 30,  0,        11, 23 },
    { "T1230-2011",            "T123000-2011",          "T12:30:00-20:11",       12, 30,  0,       -20, 11 },
    { "T1230-2011",            "T123000-2011",          "T12:30:00-20:11",       12, 30,  0,       -20, 11 },                                                  
    { "12:30",                 "T123000Z",              "T12:30:00Z",            12, 30,  0,         0,  0 },
    { "12:30",                 "T123000Z",              "T12:30:00Z",            12, 30,  0,         0,  0 },
    { "12:30Z",                "T123000Z",              "T12:30:00Z",            12, 30,  0,         0,  0 },
    { "12:30Z",                "T123000Z",              "T12:30:00Z",            12, 30,  0,         0,  0 },
    { "12:30+11:23",           "T123000+1123",          "T12:30:00+11:23",       12, 30,  0,        11, 23 },
    { "12:30+11:23",           "T123000+1123",          "T12:30:00+11:23",       12, 30,  0,        11, 23 },
    { "12:30-20:11",           "T123000-2011",          "T12:30:00-20:11",       12, 30,  0,       -20, 11 },
    { "12:30-20:11",           "T123000-2011",          "T12:30:00-20:11",       12, 30,  0,       -20, 11 },
    { "1230",                  "T123000Z",              "T12:30:00Z",            12, 30,  0,         0,  0 },
    { "1230",                  "T123000Z",              "T12:30:00Z",            12, 30,  0,         0,  0 },
    { "1230Z",                 "T123000Z",              "T12:30:00Z",            12, 30,  0,         0,  0 },
    { "1230Z",                 "T123000Z",              "T12:30:00Z",            12, 30,  0,         0,  0 },
    { "1230+1123",             "T123000+1123",          "T12:30:00+11:23",       12, 30,  0,        11, 23 },
    { "1230+1123",             "T123000+1123",          "T12:30:00+11:23",       12, 30,  0,        11, 23 },
    { "1230-2011",             "T123000-2011",          "T12:30:00-20:11",       12, 30,  0,       -20, 11 },
    { "1230-2011",             "T123000-2011",          "T12:30:00-20:11",       12, 30,  0,       -20, 11 }
  };

#pragma GCC diagnostic pop

  size_t n = sizeof(dat)/sizeof(dat[0]);

  for ( size_t i=0; i<n; i++ ) {
    int h = dat[i].off_hour;
    int m = dat[i].off_minute;
    int s = 0;
    if ( 0 > h ) {
      s = (h*60) - m;
    } else {
      s = (h*60) + m;
    }
    dat[i].off_hour   = 0;
    dat[i].off_minute = s;
  }

  for ( size_t i=0; i<n; i++ ) {
    ISO8601 P;
    P.timeFromString(dat[i].text);
    int32_t hour   = P.getHour();
    int32_t minute = P.getMinute();
    real8_t second = P.getSecond();
    int32_t offset = P.getOffset();
    
    std::string test_basic  = P.toString(true);
    std::string test_extend = P.toString(false);

    EXPECT_EQ( dat[i].hour, hour );
    EXPECT_EQ( dat[i].minute, minute );
    EXPECT_DOUBLE_EQ( dat[i].second, second );
    EXPECT_EQ( dat[i].off_minute, offset );

    EXPECT_STREQ( (dat[i].basic).c_str(),  (test_basic).c_str() );
    EXPECT_STREQ( (dat[i].extend).c_str(), (test_extend).c_str() );
  }

}


// =======================================================================================
TEST( test_ISO8601, date ) {
  // -------------------------------------------------------------------------------------

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Winline"

  date_test dat[] = {
    { "2019-06-18", "20190618", "2019-06-18", 2019, 6, 18 },
    { "20190618",   "20190618", "2019-06-18", 2019, 6, 18 },
    { "2019-06",    "20190601", "2019-06-01", 2019, 6,  1 },
    { "201906",     "20190601", "2019-06-01", 2019, 6,  1 }
  };

#pragma GCC diagnostic pop

  size_t n = sizeof(dat)/sizeof(dat[0]);

  for ( size_t i=0; i<n; i++ ) {
    ISO8601 P;
    P.dateFromString(dat[i].text);
    int32_t year  = P.getYear();
    int32_t month = P.getMonth();
    int32_t day   = P.getDay();

    std::string test_basic  = P.toString(true);
    std::string test_extend = P.toString(false);

    EXPECT_EQ( dat[i].year,  year );
    EXPECT_EQ( dat[i].month, month );
    EXPECT_EQ( dat[i].day,   day );

    EXPECT_STREQ( (dat[i].basic).c_str(),  (test_basic).c_str() );
    EXPECT_STREQ( (dat[i].extend).c_str(), (test_extend).c_str() );
  }

}

// =======================================================================================
TEST( test_ISO8601, datetime ) {
  // -------------------------------------------------------------------------------------

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Winline"

  datetime_test dat[] = {
    { "2019-06-18T12:34:45.06789",       "20190618T123445.06789Z",      "2019-06-18T12:34:45.06789Z",     2019, 6, 18, 12, 34, 45.06789,   0,  0 },
    { "20190618T123445.06789",           "20190618T123445.06789Z",      "2019-06-18T12:34:45.06789Z",     2019, 6, 18, 12, 34, 45.06789,   0,  0 },
    { "2019-06-18T12:34:45.06789Z",      "20190618T123445.06789Z",      "2019-06-18T12:34:45.06789Z",     2019, 6, 18, 12, 34, 45.06789,   0,  0 },
    { "20190618T123445.06789Z",          "20190618T123445.06789Z",      "2019-06-18T12:34:45.06789Z",     2019, 6, 18, 12, 34, 45.06789,   0,  0 },
    { "2019-06-18T12:34:45.06789+13:46", "20190618T123445.06789+1346", "2019-06-18T12:34:45.06789+13:46", 2019, 6, 18, 12, 34, 45.06789,  13, 46 },
    { "20190618T123445.06789+1346",      "20190618T123445.06789+1346", "2019-06-18T12:34:45.06789+13:46", 2019, 6, 18, 12, 34, 45.06789,  13, 46 },
    { "2019-06-18T12:34:45.06789-21:47", "20190618T123445.06789-2147", "2019-06-18T12:34:45.06789-21:47", 2019, 6, 18, 12, 34, 45.06789, -21, 47 },
    { "20190618T123445.06789-2147",      "20190618T123445.06789-2147", "2019-06-18T12:34:45.06789-21:47", 2019, 6, 18, 12, 34, 45.06789, -21, 47 },
    { "2019-06-18T12:34:45",             "20190618T123445Z",           "2019-06-18T12:34:45Z",            2019, 6, 18, 12, 34, 45.0,       0,  0 },
    { "20190618T123445",                 "20190618T123445Z",           "2019-06-18T12:34:45Z",            2019, 6, 18, 12, 34, 45.0,       0,  0 },
    { "2019-06-18T12:34:45Z",            "20190618T123445Z",           "2019-06-18T12:34:45Z",            2019, 6, 18, 12, 34, 45.0,       0,  0 },
    { "20190618T123445Z",                "20190618T123445Z",           "2019-06-18T12:34:45Z",            2019, 6, 18, 12, 34, 45.0,       0,  0 },
    { "2019-06-18T12:34:45+13:46",       "20190618T123445+1346",       "2019-06-18T12:34:45+13:46",       2019, 6, 18, 12, 34, 45.0,      13, 46 },
    { "20190618T123445+1346",            "20190618T123445+1346",       "2019-06-18T12:34:45+13:46",       2019, 6, 18, 12, 34, 45.0,      13, 46 },
    { "2019-06-18T12:34:45-21:47",       "20190618T123445-2147",       "2019-06-18T12:34:45-21:47",       2019, 6, 18, 12, 34, 45.0,     -21, 47 },
    { "20190618T123445-2147",            "20190618T123445-2147",       "2019-06-18T12:34:45-21:47",       2019, 6, 18, 12, 34, 45.0,     -21, 47 },
    { "2019-06-18",                      "20190618",                   "2019-06-18",                      2019, 6, 18,  0,  0,  0.0,       0,  0 },
    { "20190618",                        "20190618",                   "2019-06-18",                      2019, 6, 18,  0,  0,  0.0,       0,  0 },
    { "2019-06",                         "20190601",                   "2019-06-01",                      2019, 6,  1,  0,  0,  0.0,       0,  0 },
    { "201906",                          "20190601",                   "2019-06-01",                      2019, 6,  1,  0,  0,  0.0,       0,  0 },
    { "T12:34:45.06789",                 "T123445.06789Z",             "T12:34:45.06789Z",                   0, 0,  0, 12, 34, 45.06789,   0,  0 },
    { "T123445.06789",                   "T123445.06789Z",             "T12:34:45.06789Z",                   0, 0,  0, 12, 34, 45.06789,   0,  0 },
    { "T12:34:45.06789Z",                "T123445.06789Z",             "T12:34:45.06789Z",                   0, 0,  0, 12, 34, 45.06789,   0,  0 },
    { "T123445.06789Z",                  "T123445.06789Z",             "T12:34:45.06789Z",                   0, 0,  0, 12, 34, 45.06789,   0,  0 },
    { "T12:34:45.06789+13:46",           "T123445.06789+1346",         "T12:34:45.06789+13:46",              0, 0,  0, 12, 34, 45.06789,  13, 46 },
    { "T123445.06789+1346",              "T123445.06789+1346",         "T12:34:45.06789+13:46",              0, 0,  0, 12, 34, 45.06789,  13, 46 },
    { "T12:34:45.06789-21:47",           "T123445.06789-2147",         "T12:34:45.06789-21:47",              0, 0,  0, 12, 34, 45.06789, -21, 47 },
    { "T123445.06789-2147",              "T123445.06789-2147",         "T12:34:45.06789-21:47",              0, 0,  0, 12, 34, 45.06789, -21, 47 },
  };

#pragma GCC diagnostic pop

  size_t n = sizeof(dat)/sizeof(dat[0]);

  for ( size_t i=0; i<n; i++ ) {
    int h = dat[i].off_hour;
    int m = dat[i].off_minute;
    int s = 0;
    if ( 0 > h ) {
      s = (h*60) - m;
    } else {
      s = (h*60) + m;
    }
    dat[i].off_hour   = 0;
    dat[i].off_minute = s;
  }

  for ( size_t i=0; i<n; i++ ) {
    ISO8601 P(dat[i].text);
    int32_t year   = P.getYear();
    int32_t month  = P.getMonth();
    int32_t day    = P.getDay();
    int32_t hour   = P.getHour();
    int32_t minute = P.getMinute();
    real8_t second = P.getSecond();
    int32_t offset = P.getOffset();

    std::string test_basic  = P.toString(true);
    std::string test_extend = P.toString(false);

    EXPECT_EQ( dat[i].year,   year );
    EXPECT_EQ( dat[i].month,  month );
    EXPECT_EQ( dat[i].day,    day );
    EXPECT_EQ( dat[i].hour,   hour );
    EXPECT_EQ( dat[i].minute, minute );
    EXPECT_DOUBLE_EQ( dat[i].second, second );
    EXPECT_EQ( dat[i].off_minute, offset );

    EXPECT_STREQ( (dat[i].basic).c_str(),  (test_basic).c_str() );
    EXPECT_STREQ( (dat[i].extend).c_str(), (test_extend).c_str() );
  }

}


  
} // end namespace


// =======================================================================================
// **                             U T E S T _ I S O 8 6 0 1                             **
// ======================================================================== END FILE =====
